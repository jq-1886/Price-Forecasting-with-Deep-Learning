{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LSTM_GRU_Google.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMVrQHm5jIhrf8MGW1WSbT1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/acse-2020/acse2020-acse9-finalreport-acse-jaq15/blob/main/notebooks/LSTM_GRU/LSTM_GRU_Google.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z5F7GfFTgUo3"
      },
      "source": [
        "# Imports\n",
        "\n",
        "The cells below handle all the necessary imports to run our models, making use of the public repo feeder_repo, linked <!-- [Text](link) -->\n",
        "[here](https://github.com/acse-jaq15/feeder_repo)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HWy9Ay1SGzWa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "018b38ef-6d57-4c75-d5c7-96b6c8be4584"
      },
      "source": [
        "# clone the feeder repo to get data_reader module and financial time series data\n",
        "!git clone https://github.com/acse-jaq15/feeder_repo.git"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'feeder_repo'...\n",
            "remote: Enumerating objects: 147, done.\u001b[K\n",
            "remote: Counting objects: 100% (147/147), done.\u001b[K\n",
            "remote: Compressing objects: 100% (142/142), done.\u001b[K\n",
            "remote: Total 147 (delta 71), reused 6 (delta 2), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (147/147), 120.19 KiB | 4.81 MiB/s, done.\n",
            "Resolving deltas: 100% (71/71), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChlUNYaiHGM2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8714afdb-355d-44f0-c116-3a6eb6a36027"
      },
      "source": [
        "# using '%' to enforce a permanent change of directory\n",
        "%cd feeder_repo/"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/feeder_repo\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "saD-jpvPIfZ8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cff1d5c3-e3e5-491a-dbeb-71f4c40539d5"
      },
      "source": [
        "# checking contents listed correctly, should read:\n",
        "# baseline_model.py data data_reader.py LICENSE README.md security_plotter.py\n",
        "!ls"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "base_model.py  data  data_reader.py  LICENSE  README.md  security_plotter.py\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fRqkwo6kZUz_"
      },
      "source": [
        "import math\n",
        "import sys\n",
        "import keras\n",
        "import os\n",
        "import matplotlib.dates as mdates\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.layers import GRU\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import *\n",
        "from keras.utils.layer_utils import count_params\n",
        "from keras.utils.vis_utils import plot_model\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.callbacks import EarlyStopping, Callback\n",
        "from keras.optimizers import RMSprop, SGD, Adam, Nadam\n",
        "from keras.initializers import random_normal"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hzVhwND1HAlw"
      },
      "source": [
        "# appending path with 'feeder_repo' string\n",
        "sys.path.append('feeder_repo')\n",
        "\n",
        "# import Data_Reader class from data_reader module\n",
        "from feeder_repo.data_reader import Data_Reader\n",
        "# import Baseline_Model class from base_model module\n",
        "from feeder_repo.base_model import Base_Model\n",
        "# import Security_Plotter class from security_plotter module\n",
        "from feeder_repo.security_plotter import Security_Plotter"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-tNDlXuhiCU",
        "outputId": "847c1e9a-a751-41c6-d3de-b9ee47aad6af"
      },
      "source": [
        "# checking if the notebook is running on a GPU\n",
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "    print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n",
        "    print('and then re-execute this cell.')\n",
        "else:\n",
        "    print(gpu_info)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mon Jul 19 11:38:26 2021       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 470.42.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   44C    P0    27W / 250W |      0MiB / 16280MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WB9wD4Aahs8_"
      },
      "source": [
        "# Handling the data\n",
        "Here the Data_Reader class is used to read the time series data and extract training, test and validation sets, along with the relevant X and y values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBlKerL-c4-3"
      },
      "source": [
        "# storing the file to be read as a string\n",
        "in_str = 'Google'\n",
        "# storing the year of the time series to be used as test data\n",
        "in_yr = 2019\n",
        "# creating a variable to store the model name\n",
        "model_str = 'LSTM_GRU'\n",
        "# setting our window_length to be 30 days\n",
        "window_len = 30"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hfQJbuBk0vW0"
      },
      "source": [
        "# creating an instance of Data_Reader class\n",
        "in_data = Data_Reader(in_str, in_yr)\n",
        "# calling class method extract_train_test to generate training and test datasets\n",
        "in_data.extract_train_test()\n",
        "# calling class method extract_xy to generate X and y training and test datasets\n",
        "in_data.extract_xy(window_len)\n",
        "\n",
        "# assigning X_train and y_train\n",
        "X_train = in_data.X_train\n",
        "y_train = in_data.y_train\n",
        "\n",
        "# assigning X_test and y_test\n",
        "X_test = in_data.X_test\n",
        "y_test = in_data.y_test\n",
        "\n",
        "# assigning X_val_train and y_val_train\n",
        "X_val_train = in_data.X_val_train\n",
        "y_val_train = in_data.y_val_train\n",
        "\n",
        "# assigning X_val_test and y_val_test\n",
        "X_val_test = in_data.X_val_test\n",
        "y_val_test = in_data.y_val_test"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X53Fp1Gwh88_"
      },
      "source": [
        "# Setting up wandb itegration\n",
        "Here wandb is used to perform hyperparameter tuning."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aE6cdrSDiHhq",
        "outputId": "49c0bde9-fb0b-4a31-c704-d55ad7e3fc9a"
      },
      "source": [
        "# installing the wandb library and importing\n",
        "%pip install wandb -q\n",
        "import wandb\n",
        "from wandb.keras import WandbCallback"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 1.8MB 12.6MB/s \n",
            "\u001b[K     |████████████████████████████████| 143kB 39.0MB/s \n",
            "\u001b[K     |████████████████████████████████| 174kB 38.5MB/s \n",
            "\u001b[K     |████████████████████████████████| 143kB 37.6MB/s \n",
            "\u001b[K     |████████████████████████████████| 102kB 9.9MB/s \n",
            "\u001b[K     |████████████████████████████████| 71kB 6.6MB/s \n",
            "\u001b[?25h  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[31mERROR: requests 2.23.0 has requirement urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1, but you'll have urllib3 1.26.6 which is incompatible.\u001b[0m\n",
            "\u001b[31mERROR: datascience 0.10.6 has requirement folium==0.2.1, but you'll have folium 0.8.3 which is incompatible.\u001b[0m\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbgZaoQDiIKX"
      },
      "source": [
        "!pip install wandb -qq"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1WHkW0XyiKVL",
        "outputId": "6280ff81-c840-4087-ebff-6474c50d3a15"
      },
      "source": [
        "# logging in so the hyperparameter tunings sweeps can be saved\n",
        "!wandb login"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.26.6) or chardet (3.0.4) doesn't match a supported version!\n",
            "  RequestsDependencyWarning)\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter: \n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j91IBGuSid5w"
      },
      "source": [
        "# configuring the sweep, making use of a random search methodology\n",
        "sweep_config = {\n",
        "    'method': 'random', #grid, random\n",
        "    'metric': {\n",
        "      'name': 'mse',\n",
        "      'goal': 'minimize'   \n",
        "    },\n",
        "    'parameters': {\n",
        "        'epochs': {\n",
        "            'values': [50, 100, 200]\n",
        "        },\n",
        "        'batch_size': {\n",
        "            'values': [128, 64, 32]\n",
        "        },\n",
        "        'learning_rate': {\n",
        "            'values': [0.005, 0.001, 0.0005]\n",
        "        },\n",
        "        'dropout': {\n",
        "            'values': [0.1, 0.2, 0.3]\n",
        "        },\n",
        "        'optimizer': {\n",
        "            'values': ['adam', 'nadam', 'rmsprop']\n",
        "        },\n",
        "        'activation': {\n",
        "            'values': ['tanh', 'relu', 'selu']\n",
        "        }\n",
        "    }\n",
        "}"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V0Sr9HsorH4E"
      },
      "source": [
        "# wandb calls this training function to run through the hyperparameter search\n",
        "def train():\n",
        "    # default values for searching\n",
        "    config_defaults = {\n",
        "        'epochs': 100,\n",
        "        'batch_size': 32,\n",
        "        'learning_rate': 0.005,\n",
        "        'dropout': 0.2,\n",
        "        'optimizer': 'adam',\n",
        "        'activation': 'tanh',\n",
        "        'momentum': 0.9,\n",
        "        'seed': 42\n",
        "    }\n",
        "\n",
        "    # Initialize a new wandb run\n",
        "    wandb.init(config=config_defaults)\n",
        "    \n",
        "    # Config is a variable that holds and saves hyperparameters and inputs\n",
        "    config = wandb.config\n",
        "\n",
        "    # setting keras model to sequential mode\n",
        "    model = Sequential()\n",
        "\n",
        "    # layer 1\n",
        "    model.add(LSTM(units=64, activation=config.activation, return_sequences=True, input_shape=(window_len, 1)))\n",
        "    model.add(Dropout(config.dropout))\n",
        "    # layer 2\n",
        "    model.add(GRU(units=64, activation=config.activation))\n",
        "    model.add(Dropout(0.1))\n",
        "    # layer 3\n",
        "    model.add(Dense(1))\n",
        "\n",
        "    # Define the optimizer\n",
        "    if config.optimizer=='sgd':\n",
        "      optimizer = SGD(learning_rate=config.learning_rate, decay=1e-5, momentum=config.momentum, nesterov=True)\n",
        "    elif config.optimizer=='rmsprop':\n",
        "      optimizer = RMSprop(learning_rate=config.learning_rate, decay=1e-5)\n",
        "    elif config.optimizer=='adam':\n",
        "      optimizer = Adam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "    elif config.optimizer=='nadam':\n",
        "      optimizer = Nadam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "    model.compile(loss = \"mean_squared_error\", optimizer=optimizer, metrics=['mean_squared_error', 'mean_absolute_error'])\n",
        "\n",
        "    model.fit(X_val_train, y_val_train, batch_size=config.batch_size,\n",
        "              epochs=config.epochs,\n",
        "              validation_data=(X_val_test, y_val_test),\n",
        "              callbacks=[WandbCallback(validation_data=(X_val_test, y_val_test)),\n",
        "                          EarlyStopping(patience=10, restore_best_weights=True)])"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwZO6oAFU1LN",
        "outputId": "7155330a-5d45-4775-8a2d-ea5e29fb812f"
      },
      "source": [
        "# setting up our sweep_id\n",
        "sweep_id = wandb.sweep(sweep_config, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Create sweep with ID: e7gug0sx\n",
            "Sweep URL: https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU/sweeps/e7gug0sx\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 768
        },
        "id": "ZfSCGWfluFw0",
        "outputId": "3fbcdf92-ab97-4e92-9b08-158e5a03eaad"
      },
      "source": [
        "# initialising a new sweep\n",
        "wandb.agent(sweep_id, train, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Calling wandb.login() after wandb.init() has no effect.\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: ebxvkg7j with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: relu\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 32\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.1\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 200\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.001\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: adam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.11.0<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">leafy-sweep-30</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU/sweeps/e7gug0sx\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU/sweeps/e7gug0sx</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU/runs/ebxvkg7j\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM_GRU/runs/ebxvkg7j</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210719_135122-ebxvkg7j</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Layer lstm will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n",
            "WARNING:tensorflow:Layer gru will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n",
            "Epoch 1/200\n",
            "31/31 [==============================] - 11s 219ms/step - loss: 0.1459 - mean_squared_error: 0.1459 - mean_absolute_error: 0.2948 - val_loss: 0.0188 - val_mean_squared_error: 0.0188 - val_mean_absolute_error: 0.1110\n",
            "Epoch 2/200\n",
            "31/31 [==============================] - 5s 176ms/step - loss: 0.0096 - mean_squared_error: 0.0096 - mean_absolute_error: 0.0777 - val_loss: 0.0142 - val_mean_squared_error: 0.0142 - val_mean_absolute_error: 0.0949\n",
            "Epoch 3/200\n",
            "31/31 [==============================] - 5s 164ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0422 - val_loss: 0.0125 - val_mean_squared_error: 0.0125 - val_mean_absolute_error: 0.0909\n",
            "Epoch 4/200\n",
            "31/31 [==============================] - 5s 172ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0395 - val_loss: 0.0123 - val_mean_squared_error: 0.0123 - val_mean_absolute_error: 0.0896\n",
            "Epoch 5/200\n",
            "31/31 [==============================] - 6s 180ms/step - loss: 0.0028 - mean_squared_error: 0.0028 - mean_absolute_error: 0.0387 - val_loss: 0.0123 - val_mean_squared_error: 0.0123 - val_mean_absolute_error: 0.0897\n",
            "Epoch 6/200\n",
            "31/31 [==============================] - 5s 160ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0364 - val_loss: 0.0122 - val_mean_squared_error: 0.0122 - val_mean_absolute_error: 0.0883\n",
            "Epoch 7/200\n",
            "31/31 [==============================] - 5s 159ms/step - loss: 0.0030 - mean_squared_error: 0.0030 - mean_absolute_error: 0.0393 - val_loss: 0.0118 - val_mean_squared_error: 0.0118 - val_mean_absolute_error: 0.0875\n",
            "Epoch 8/200\n",
            "31/31 [==============================] - 5s 173ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0372 - val_loss: 0.0115 - val_mean_squared_error: 0.0115 - val_mean_absolute_error: 0.0865\n",
            "Epoch 9/200\n",
            "31/31 [==============================] - 5s 166ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0354 - val_loss: 0.0115 - val_mean_squared_error: 0.0115 - val_mean_absolute_error: 0.0861\n",
            "Epoch 10/200\n",
            "31/31 [==============================] - 5s 162ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0355 - val_loss: 0.0113 - val_mean_squared_error: 0.0113 - val_mean_absolute_error: 0.0852\n",
            "Epoch 11/200\n",
            "31/31 [==============================] - 5s 168ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0352 - val_loss: 0.0119 - val_mean_squared_error: 0.0119 - val_mean_absolute_error: 0.0871\n",
            "Epoch 12/200\n",
            "31/31 [==============================] - 5s 175ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0381 - val_loss: 0.0116 - val_mean_squared_error: 0.0116 - val_mean_absolute_error: 0.0858\n",
            "Epoch 13/200\n",
            "12/31 [==========>...................] - ETA: 3s - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0340"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Ctrl + C detected. Stopping sweep.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFTu29dbi18i"
      },
      "source": [
        "# Setting up the best model\n",
        "Using the best values from the hyperparamter search with wandb, the most optimal model configuration is used."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwsO8cDJPMdj"
      },
      "source": [
        "# picking the best values\n",
        "best_config = {\n",
        "    'epochs': 100,\n",
        "    'batch_size': 32,\n",
        "    'learning_rate': 0.001,\n",
        "    'dropout': 0.1,\n",
        "    'optimizer': 'nadam',\n",
        "    'activation': 'selu'\n",
        "}"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OU7NXYBg1T4r",
        "outputId": "6201cefb-7516-4eb4-f257-7f67a63089bb"
      },
      "source": [
        "# clearing the settings on the keras backend\n",
        "keras.backend.clear_session()\n",
        "\n",
        "# setting keras model to sequential mode\n",
        "model = Sequential()\n",
        "\n",
        "# layer 1\n",
        "model.add(LSTM(units=64, activation=best_config['activation'], return_sequences=True, input_shape=(window_len, 1)))\n",
        "model.add(Dropout(best_config['dropout']))\n",
        "# layer 2\n",
        "model.add(GRU(units=64, activation=best_config['activation']))\n",
        "model.add(Dropout(0.1))\n",
        "# layer 3\n",
        "model.add(Dense(1))\n",
        "\n",
        "# defining the optimiser\n",
        "if best_config['optimizer'] == 'sgd':\n",
        "  optimizer = SGD(learning_rate=best_config['learning_rate'], decay=1e-5, momentum=0.9, nesterov=True)\n",
        "elif best_config['optimizer'] == 'rmsprop':\n",
        "  optimizer = RMSprop(learning_rate=best_config['learning_rate'], decay=1e-5)\n",
        "elif best_config['optimizer'] == 'adam':\n",
        "  optimizer = Adam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "elif best_config['optimizer'] == 'nadam':\n",
        "  optimizer = Nadam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "# compile the model\n",
        "model.compile(optimizer, loss='mean_squared_error')\n",
        "\n",
        "# counting the number of trainable parameters\n",
        "trainable_count = count_params(model.trainable_weights)\n",
        "print('Total number of trainable parameters: ', trainable_count)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Layer lstm will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n",
            "WARNING:tensorflow:Layer gru will not use cuDNN kernels since it doesn't meet the criteria. It will use a generic GPU kernel as fallback when running on GPU.\n",
            "Total number of trainable parameters:  41921\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5UG8j_4r7kSu",
        "outputId": "5af2b923-3138-4cfd-992b-a024c6e919be"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "lstm (LSTM)                  (None, 30, 64)            16896     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 30, 64)            0         \n",
            "_________________________________________________________________\n",
            "gru (GRU)                    (None, 64)                24960     \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1)                 65        \n",
            "=================================================================\n",
            "Total params: 41,921\n",
            "Trainable params: 41,921\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3v718GcE39o",
        "outputId": "c1a5f3d4-8f66-4ae6-c18d-b2b7644cfd7b"
      },
      "source": [
        "# fitting the model to the training dataset\n",
        "model.fit(X_train, y_train, epochs=best_config['epochs'], batch_size=best_config['batch_size'])"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "39/39 [==============================] - 10s 152ms/step - loss: 0.0300\n",
            "Epoch 2/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 0.0029\n",
            "Epoch 3/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 0.0024\n",
            "Epoch 4/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0031\n",
            "Epoch 5/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 0.0016\n",
            "Epoch 6/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0017\n",
            "Epoch 7/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 0.0019\n",
            "Epoch 8/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 0.0015\n",
            "Epoch 9/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 0.0018\n",
            "Epoch 10/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 0.0016\n",
            "Epoch 11/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0015\n",
            "Epoch 12/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 0.0018\n",
            "Epoch 13/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 0.0014\n",
            "Epoch 14/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 0.0015\n",
            "Epoch 15/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 0.0015\n",
            "Epoch 16/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 0.0013\n",
            "Epoch 17/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0015\n",
            "Epoch 18/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0012\n",
            "Epoch 19/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0013\n",
            "Epoch 20/100\n",
            "39/39 [==============================] - 6s 160ms/step - loss: 0.0011\n",
            "Epoch 21/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 0.0012\n",
            "Epoch 22/100\n",
            "39/39 [==============================] - 6s 150ms/step - loss: 0.0015\n",
            "Epoch 23/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 0.0014\n",
            "Epoch 24/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 0.0010\n",
            "Epoch 25/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 0.0013\n",
            "Epoch 26/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0011\n",
            "Epoch 27/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 0.0017\n",
            "Epoch 28/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 0.0012\n",
            "Epoch 29/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 0.0013\n",
            "Epoch 30/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 9.8878e-04\n",
            "Epoch 31/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 0.0013\n",
            "Epoch 32/100\n",
            "39/39 [==============================] - 6s 160ms/step - loss: 9.1320e-04\n",
            "Epoch 33/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 0.0013\n",
            "Epoch 34/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 0.0010\n",
            "Epoch 35/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 0.0011\n",
            "Epoch 36/100\n",
            "39/39 [==============================] - 6s 152ms/step - loss: 0.0016\n",
            "Epoch 37/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 0.0012\n",
            "Epoch 38/100\n",
            "39/39 [==============================] - 6s 150ms/step - loss: 0.0011\n",
            "Epoch 39/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 0.0010\n",
            "Epoch 40/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 9.6505e-04\n",
            "Epoch 41/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 9.7087e-04\n",
            "Epoch 42/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 8.0859e-04\n",
            "Epoch 43/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 7.2018e-04\n",
            "Epoch 44/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 0.0012\n",
            "Epoch 45/100\n",
            "39/39 [==============================] - 6s 161ms/step - loss: 9.4970e-04\n",
            "Epoch 46/100\n",
            "39/39 [==============================] - 6s 161ms/step - loss: 9.8967e-04\n",
            "Epoch 47/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 9.4829e-04\n",
            "Epoch 48/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 8.4967e-04\n",
            "Epoch 49/100\n",
            "39/39 [==============================] - 6s 152ms/step - loss: 8.8408e-04\n",
            "Epoch 50/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 9.3296e-04\n",
            "Epoch 51/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 9.8640e-04\n",
            "Epoch 52/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 8.7338e-04\n",
            "Epoch 53/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 9.4962e-04\n",
            "Epoch 54/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 6.5122e-04\n",
            "Epoch 55/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 9.6208e-04\n",
            "Epoch 56/100\n",
            "39/39 [==============================] - 6s 161ms/step - loss: 8.1056e-04\n",
            "Epoch 57/100\n",
            "39/39 [==============================] - 6s 160ms/step - loss: 7.9240e-04\n",
            "Epoch 58/100\n",
            "39/39 [==============================] - 7s 167ms/step - loss: 8.7747e-04\n",
            "Epoch 59/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 8.8302e-04\n",
            "Epoch 60/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 7.0990e-04\n",
            "Epoch 61/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 9.4828e-04\n",
            "Epoch 62/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 7.3601e-04\n",
            "Epoch 63/100\n",
            "39/39 [==============================] - 6s 163ms/step - loss: 8.4454e-04\n",
            "Epoch 64/100\n",
            "39/39 [==============================] - 6s 152ms/step - loss: 8.0878e-04\n",
            "Epoch 65/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 7.3208e-04\n",
            "Epoch 66/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 9.1426e-04\n",
            "Epoch 67/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 8.0472e-04\n",
            "Epoch 68/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 7.9188e-04\n",
            "Epoch 69/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 7.6741e-04\n",
            "Epoch 70/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 6.1308e-04\n",
            "Epoch 71/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 8.5758e-04\n",
            "Epoch 72/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 7.0721e-04\n",
            "Epoch 73/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 8.9494e-04\n",
            "Epoch 74/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 0.0011\n",
            "Epoch 75/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 8.8513e-04\n",
            "Epoch 76/100\n",
            "39/39 [==============================] - 6s 161ms/step - loss: 7.3791e-04\n",
            "Epoch 77/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 7.1231e-04\n",
            "Epoch 78/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 8.0352e-04\n",
            "Epoch 79/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 7.9183e-04\n",
            "Epoch 80/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 6.6651e-04\n",
            "Epoch 81/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 6.4080e-04\n",
            "Epoch 82/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 6.9819e-04\n",
            "Epoch 83/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 5.7994e-04\n",
            "Epoch 84/100\n",
            "39/39 [==============================] - 6s 164ms/step - loss: 8.1095e-04\n",
            "Epoch 85/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 6.4009e-04\n",
            "Epoch 86/100\n",
            "39/39 [==============================] - 6s 152ms/step - loss: 6.9184e-04\n",
            "Epoch 87/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 6.9412e-04\n",
            "Epoch 88/100\n",
            "39/39 [==============================] - 6s 151ms/step - loss: 6.5381e-04\n",
            "Epoch 89/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 6.5301e-04\n",
            "Epoch 90/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 6.2280e-04\n",
            "Epoch 91/100\n",
            "39/39 [==============================] - 6s 155ms/step - loss: 7.1119e-04\n",
            "Epoch 92/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 6.7104e-04\n",
            "Epoch 93/100\n",
            "39/39 [==============================] - 6s 152ms/step - loss: 7.3912e-04\n",
            "Epoch 94/100\n",
            "39/39 [==============================] - 6s 157ms/step - loss: 5.8324e-04\n",
            "Epoch 95/100\n",
            "39/39 [==============================] - 6s 154ms/step - loss: 7.5757e-04\n",
            "Epoch 96/100\n",
            "39/39 [==============================] - 6s 159ms/step - loss: 6.5531e-04\n",
            "Epoch 97/100\n",
            "39/39 [==============================] - 6s 158ms/step - loss: 6.8090e-04\n",
            "Epoch 98/100\n",
            "39/39 [==============================] - 6s 156ms/step - loss: 6.2058e-04\n",
            "Epoch 99/100\n",
            "39/39 [==============================] - 6s 153ms/step - loss: 5.6886e-04\n",
            "Epoch 100/100\n",
            "39/39 [==============================] - 6s 160ms/step - loss: 6.0813e-04\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f2683124f50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rTXJN51l9Y-F"
      },
      "source": [
        "# creating an instance of Baseline_Model class using X_test\n",
        "base_model = Base_Model(X_test, window_len)\n",
        "# calling predict_y method\n",
        "base_model.predict_y(in_data.test_len - window_len)\n",
        "\n",
        "# using the model to predict y from X_test\n",
        "y_pred = model.predict(X_test)\n",
        "# assigning y_dummy variable to .y_pred class attribute\n",
        "y_dummy = base_model.y_pred\n",
        "\n",
        "# calling class method extract_real_price to generate unnormalised prices\n",
        "in_data.extract_real_prices(y_pred, y_dummy)\n",
        "\n",
        "# assinging y_true variable\n",
        "y_true = in_data.y_true\n",
        "\n",
        "# assigning actual_price, predicted_price and dummy_price\n",
        "actual_price = in_data.actual_price\n",
        "predicted_price = in_data.predicted_price\n",
        "dummy_price = in_data.dummy_price"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-D-XHyRjFMp"
      },
      "source": [
        "# Plotting the prediction results and getting errors\n",
        "The cells below plot the actual, predicted and dummy prices using the Security_Plotter class before finally saving the model and plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "PgjvooOD3jq3",
        "outputId": "bf751d59-95f6-49a7-e6c0-7868ad05810e"
      },
      "source": [
        "plotter = Security_Plotter(in_data, actual_price, predicted_price,\n",
        "                            dummy_price, in_data.train_len, window_len, in_str, model_str)\n",
        "\n",
        "plotter.single_plot()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AxaH7IUCxSXw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        },
        "outputId": "b535eac5-0f60-4451-c922-d46103daecb4"
      },
      "source": [
        "plot_model(model, show_shapes=True, expand_nested=True)"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFfQGfb79SJS",
        "outputId": "dabf554b-658c-44d9-8345-733c44b40958"
      },
      "source": [
        "# calculating mean squared error\n",
        "mse = mean_squared_error(y_true, y_pred)\n",
        "d_mse = mean_squared_error(y_true, y_dummy)\n",
        "\n",
        "# calculating root mean squared error\n",
        "rmse = mean_squared_error(y_true, y_pred, squared=False)\n",
        "d_rmse = mean_squared_error(y_true, y_dummy, squared=False)\n",
        "\n",
        "# calculating mean absolute error\n",
        "mae = mean_absolute_error(y_true, y_pred)\n",
        "d_mae = mean_absolute_error(y_true, y_dummy)\n",
        "\n",
        "print('MSE: ', mse)\n",
        "print('RMSE: ', rmse)\n",
        "print('MAE: ', mae)\n",
        "print('Dummy MSE: ', d_mse)\n",
        "print('Dummy RMSE: ', d_rmse)\n",
        "print('Dummy MAE: ', d_mae)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE:  0.00329558430911553\n",
            "RMSE:  0.057407179943936716\n",
            "MAE:  0.040287171919933376\n",
            "Dummy MSE:  0.01786933010743511\n",
            "Dummy RMSE:  0.13367621369351806\n",
            "Dummy MAE:  0.10749275974657799\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4YttzJHHU4-s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36447021-1f7a-4e65-ab0e-d4429429a012"
      },
      "source": [
        "# creating a string to save the model based on model name\n",
        "save_path = '/content/gdrive/My Drive/models/'+model_str+'_'+in_str+'/'\n",
        "# mounting google drive for easy storage of model\n",
        "from google.colab import drive\n",
        "# mounting the drive\n",
        "drive.mount('/content/gdrive/')\n",
        "# making the relevant directory to store the model\n",
        "os.mkdir(save_path)\n",
        "# saving the model\n",
        "keras.models.save_model(model, save_path)\n",
        "# saving the model graph\n",
        "model_graph = plot_model(model, to_file=save_path+model_str+'_'+in_str+'_graph_.png', show_shapes=True, expand_nested=True)\n",
        "# saving the matplotlib plot\n",
        "plotter.fig.savefig(save_path+model_str+'_'+in_str+'_plot.png', bbox_inches='tight')\n",
        "# saving the error metrics as a text file\n",
        "error_file = open(save_path+model_str+'_'+in_str+'_metrics.txt', 'w+')\n",
        "error_file.write('MSE: '+str(mse)+'\\n'+'RMSE: '+str(rmse)+'\\n'+'MAE: '+str(mae)+'\\n'+\n",
        "                 'Dummy MSE: '+str(d_mse)+'\\n'+'Dummy RMSE: '+str(d_rmse)+'\\n'+'Dummy MAE: '+str(d_mae))\n",
        "error_file.close()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive/\n",
            "INFO:tensorflow:Assets written to: /content/gdrive/My Drive/models/LSTM_GRU_Google/assets\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}