{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LSTM_Treasury10y.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMkGUMl7x9E/18DT/UT+5IK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "1d1fd5183cee46ea8fa8cde390a2c54e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_fe0a4d3f04dc4828aef42d4261739ed6",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_6188b5036c3a42dc9006a23308cb6e4b",
              "IPY_MODEL_56b6ab4bb0714bf0abac5621ccc58b72"
            ]
          }
        },
        "fe0a4d3f04dc4828aef42d4261739ed6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "6188b5036c3a42dc9006a23308cb6e4b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_350d0907452f4772b81b58234d67ef6d",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 0.53MB of 0.53MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0aa359aa0f894e20964333fb5749cc6f"
          }
        },
        "56b6ab4bb0714bf0abac5621ccc58b72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_97356a8720184107a160c005b9f123af",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_c4f8410310b0427d95a7b449d1e45ba6"
          }
        },
        "350d0907452f4772b81b58234d67ef6d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0aa359aa0f894e20964333fb5749cc6f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "97356a8720184107a160c005b9f123af": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "c4f8410310b0427d95a7b449d1e45ba6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "0f6d3ab277ad483c92fbf02e20d406a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_6c46ced9e83847678b71246116df0c38",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_032c5094bed44fd8b8c4bdd835cd5e1a",
              "IPY_MODEL_f5e474eeae4f4f87a98c778d0238d477"
            ]
          }
        },
        "6c46ced9e83847678b71246116df0c38": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "032c5094bed44fd8b8c4bdd835cd5e1a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_a912719265e54996866722d3261ab70c",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 3.02MB of 3.02MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_cfe9266d5bfb4e46bcaae4da9276d97f"
          }
        },
        "f5e474eeae4f4f87a98c778d0238d477": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_387f525cccff4544a37a4dddd40fce93",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_919f92ba4a0a4defa1ed3e588932816a"
          }
        },
        "a912719265e54996866722d3261ab70c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "cfe9266d5bfb4e46bcaae4da9276d97f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "387f525cccff4544a37a4dddd40fce93": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "919f92ba4a0a4defa1ed3e588932816a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a25e783ff61f49e38589a48cb4ca53a0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_8bf7ad52430b4b7abd9e64406b68b3b1",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_2226dc9635044a9c97d8c3bbcc14bb40",
              "IPY_MODEL_d2c65fe9428d47e197196437d1abfeac"
            ]
          }
        },
        "8bf7ad52430b4b7abd9e64406b68b3b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "2226dc9635044a9c97d8c3bbcc14bb40": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_f629f578e20c48f6919b7c91e5186b53",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 0.71MB of 0.71MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_456a1e4ee8e340d7ab08f1f932994b40"
          }
        },
        "d2c65fe9428d47e197196437d1abfeac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_17d29c2a34c445e380fc1d1f48ecc165",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_5bdb8537e7404bfc92fcb997ccef051e"
          }
        },
        "f629f578e20c48f6919b7c91e5186b53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "456a1e4ee8e340d7ab08f1f932994b40": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "17d29c2a34c445e380fc1d1f48ecc165": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "5bdb8537e7404bfc92fcb997ccef051e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "d88203f05ed14b58a75e57b5958e009f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_d90c9828801d4c9e96725d674376842e",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_89d72eada28b47f8a25d2914c5350329",
              "IPY_MODEL_eeb3e58c2a8d48d4bb37dfb55097deca"
            ]
          }
        },
        "d90c9828801d4c9e96725d674376842e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "89d72eada28b47f8a25d2914c5350329": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_32b00827b6cd466588a52e00fc0fdbf7",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.12MB of 1.12MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_71b0d8b2e32f447789faa35a8f9036d1"
          }
        },
        "eeb3e58c2a8d48d4bb37dfb55097deca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_10dc91bb9e714b2394228c31d53b4b1e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9adaf11e7aa9423284c3ae049401ed30"
          }
        },
        "32b00827b6cd466588a52e00fc0fdbf7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "71b0d8b2e32f447789faa35a8f9036d1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "10dc91bb9e714b2394228c31d53b4b1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9adaf11e7aa9423284c3ae049401ed30": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "daa5528c59bc4f4598b6ba259357dda2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_e96374ae80394dcb8611429485d3baad",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_df6d87fe7f77426cb4844b5c35254110",
              "IPY_MODEL_e3281b1978f54d0a979588d50c884df3"
            ]
          }
        },
        "e96374ae80394dcb8611429485d3baad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "df6d87fe7f77426cb4844b5c35254110": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_c109a4162d5046efaf3995eaf708e94c",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 3.09MB of 3.09MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f74f024cdde14e56b4ff08341cd52372"
          }
        },
        "e3281b1978f54d0a979588d50c884df3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_80094befe1484c5e971e210e41618ea5",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_f6465fe9109149e8aeac41336dd6b6a4"
          }
        },
        "c109a4162d5046efaf3995eaf708e94c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f74f024cdde14e56b4ff08341cd52372": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "80094befe1484c5e971e210e41618ea5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "f6465fe9109149e8aeac41336dd6b6a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "3e79d4f7b30d4de58a9e12f85c731e74": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_5c40ad618479440cbbae9e7fe49d83db",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_8d877cf80de94a2eac7c0cf98e2f41aa",
              "IPY_MODEL_17553369fde44ca7bb53bef50c09b28d"
            ]
          }
        },
        "5c40ad618479440cbbae9e7fe49d83db": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8d877cf80de94a2eac7c0cf98e2f41aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_50a989f16a464f438ab583d8ca22428b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 1.27MB of 1.27MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_760c391e4b084ede9c119b1fe02587e4"
          }
        },
        "17553369fde44ca7bb53bef50c09b28d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_46ff78563cf3413a8cccd849af83ca15",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_4a8693dd85204d4f9a12a3c172ad9047"
          }
        },
        "50a989f16a464f438ab583d8ca22428b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "760c391e4b084ede9c119b1fe02587e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "46ff78563cf3413a8cccd849af83ca15": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "4a8693dd85204d4f9a12a3c172ad9047": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/acse-2020/acse2020-acse9-finalreport-acse-jaq15/blob/main/notebooks/LSTM/LSTM_Treasury10y.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z5F7GfFTgUo3"
      },
      "source": [
        "# Imports\n",
        "\n",
        "The cells below handle all the necessary imports to run our models, making use of the public repo feeder_repo, linked <!-- [Text](link) -->\n",
        "[here](https://github.com/acse-jaq15/feeder_repo)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HWy9Ay1SGzWa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e321453-84bc-46ee-c6df-89fff2e9374c"
      },
      "source": [
        "# clone the feeder repo to get data_reader module and financial time series data\n",
        "!git clone https://github.com/acse-jaq15/feeder_repo.git"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'feeder_repo'...\n",
            "remote: Enumerating objects: 144, done.\u001b[K\n",
            "remote: Counting objects: 100% (144/144), done.\u001b[K\n",
            "remote: Compressing objects: 100% (139/139), done.\u001b[K\n",
            "remote: Total 144 (delta 69), reused 6 (delta 2), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (144/144), 119.43 KiB | 5.19 MiB/s, done.\n",
            "Resolving deltas: 100% (69/69), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChlUNYaiHGM2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "97744075-92b2-48e3-aa6a-1ea8609ca660"
      },
      "source": [
        "# using '%' to enforce a permanent change of directory\n",
        "%cd feeder_repo/"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/feeder_repo\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "saD-jpvPIfZ8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9deb5f82-375e-4ed7-a638-cc1e4349b3e2"
      },
      "source": [
        "# checking contents listed correctly, should read:\n",
        "# baseline_model.py data data_reader.py LICENSE README.md security_plotter.py\n",
        "!ls"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "base_model.py  data  data_reader.py  LICENSE  README.md  security_plotter.py\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fRqkwo6kZUz_"
      },
      "source": [
        "import math\n",
        "import sys\n",
        "import keras\n",
        "import os\n",
        "import matplotlib.dates as mdates\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.layers import GRU\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import *\n",
        "from keras.utils.layer_utils import count_params\n",
        "from keras.utils.vis_utils import plot_model\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.callbacks import EarlyStopping, Callback\n",
        "from keras.optimizers import RMSprop, SGD, Adam, Nadam\n",
        "from keras.initializers import random_normal"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hzVhwND1HAlw"
      },
      "source": [
        "# appending path with 'feeder_repo' string\n",
        "sys.path.append('feeder_repo')\n",
        "\n",
        "# import Data_Reader class from data_reader module\n",
        "from feeder_repo.data_reader import Data_Reader\n",
        "# import Baseline_Model class from base_model module\n",
        "from feeder_repo.base_model import Base_Model\n",
        "# import Security_Plotter class from security_plotter module\n",
        "from feeder_repo.security_plotter import Security_Plotter"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-tNDlXuhiCU",
        "outputId": "24aa7f71-8a04-407b-fdbc-27830fbab0c0"
      },
      "source": [
        "# checking if the notebook is running on a GPU\n",
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "    print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n",
        "    print('and then re-execute this cell.')\n",
        "else:\n",
        "    print(gpu_info)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Wed Jul 14 12:45:40 2021       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 470.42.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   39C    P0    29W / 250W |      0MiB / 16280MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WB9wD4Aahs8_"
      },
      "source": [
        "# Handling the data\n",
        "Here the Data_Reader class is used to read the time series data and extract training, test and validation sets, along with the relevant X and y values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBlKerL-c4-3"
      },
      "source": [
        "# storing the file to be read as a string\n",
        "in_str = 'Treasury10y'\n",
        "# storing the year of the time series to be used as test data\n",
        "in_yr = 2019\n",
        "# creating a variable to store the model name\n",
        "model_str = 'LSTM'\n",
        "# setting our window_length to be 30 days\n",
        "window_len = 30"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hfQJbuBk0vW0"
      },
      "source": [
        "# creating an instance of Data_Reader class\n",
        "in_data = Data_Reader(in_str, in_yr)\n",
        "# calling class method extract_train_test to generate training and test datasets\n",
        "in_data.extract_train_test()\n",
        "# calling class method extract_xy to generate X and y training and test datasets\n",
        "in_data.extract_xy(window_len)\n",
        "\n",
        "# assigning X_train and y_train\n",
        "X_train = in_data.X_train\n",
        "y_train = in_data.y_train\n",
        "\n",
        "# assigning X_test and y_test\n",
        "X_test = in_data.X_test\n",
        "y_test = in_data.y_test\n",
        "\n",
        "# assigning X_val_train and y_val_train\n",
        "X_val_train = in_data.X_val_train\n",
        "y_val_train = in_data.y_val_train\n",
        "\n",
        "# assigning X_val_test and y_val_test\n",
        "X_val_test = in_data.X_val_test\n",
        "y_val_test = in_data.y_val_test"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X53Fp1Gwh88_"
      },
      "source": [
        "# Setting up wandb itegration\n",
        "Here wandb is used to perform hyperparameter tuning."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aE6cdrSDiHhq",
        "outputId": "560399b7-e23a-4738-f58f-c61130b6ff3f"
      },
      "source": [
        "# installing the wandb library and importing\n",
        "%pip install wandb -q\n",
        "import wandb\n",
        "from wandb.keras import WandbCallback"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 1.8MB 13.3MB/s \n",
            "\u001b[K     |████████████████████████████████| 102kB 15.2MB/s \n",
            "\u001b[K     |████████████████████████████████| 174kB 50.8MB/s \n",
            "\u001b[K     |████████████████████████████████| 143kB 51.3MB/s \n",
            "\u001b[K     |████████████████████████████████| 71kB 11.8MB/s \n",
            "\u001b[?25h  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbgZaoQDiIKX"
      },
      "source": [
        "!pip install wandb -qq"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1WHkW0XyiKVL",
        "outputId": "a61f4e54-b4c6-4c03-b484-08a5665a0fc2"
      },
      "source": [
        "# logging in so the hyperparameter tunings sweeps can be saved\n",
        "!wandb login"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter: \n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j91IBGuSid5w"
      },
      "source": [
        "# configuring the sweep, making use of a random search methodology\n",
        "sweep_config = {\n",
        "    'method': 'random', #grid, random\n",
        "    'metric': {\n",
        "      'name': 'mse',\n",
        "      'goal': 'minimize'   \n",
        "    },\n",
        "    'parameters': {\n",
        "        'epochs': {\n",
        "            'values': [50, 100, 200]\n",
        "        },\n",
        "        'batch_size': {\n",
        "            'values': [128, 64, 32]\n",
        "        },\n",
        "        'dropout': {\n",
        "            'values': [0.2, 0.3, 0.4]\n",
        "        },\n",
        "        'input_size': {\n",
        "            'values': [25, 50, 100]\n",
        "        },\n",
        "        'hidden_size': {\n",
        "            'values': [25, 50, 100]\n",
        "        },\n",
        "        'learning_rate': {\n",
        "            'values': [0.005, 0.001, 0.0005]\n",
        "        },\n",
        "        'optimizer': {\n",
        "            'values': ['adam', 'nadam', 'rmsprop']\n",
        "        },\n",
        "        'activation': {\n",
        "            'values': ['tanh']\n",
        "        }\n",
        "    }\n",
        "}"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V0Sr9HsorH4E"
      },
      "source": [
        "# The sweep calls this function with each set of hyperparameters\n",
        "def train():\n",
        "    # Default values for hyper-parameters we're going to sweep over\n",
        "    config_defaults = {\n",
        "        'epochs': 100,\n",
        "        'batch_size': 32,\n",
        "        'dropout': 0.2,\n",
        "        'input_size': 50,\n",
        "        'hidden_size': 50,\n",
        "        'learning_rate': 0.005,\n",
        "        'optimizer': 'adam',\n",
        "        'activation': 'tanh',\n",
        "        'momentum': 0.9,\n",
        "        'seed': 42\n",
        "    }\n",
        "\n",
        "    # Initialize a new wandb run\n",
        "    wandb.init(config=config_defaults)\n",
        "    \n",
        "    # Config is a variable that holds and saves hyperparameters and inputs\n",
        "    config = wandb.config\n",
        "    \n",
        "    # Define the model architecture\n",
        "    model = Sequential()\n",
        "\n",
        "    # input layer\n",
        "    model.add(LSTM(units=config.input_size, return_sequences=True, input_shape=(window_len, 1), activation=config.activation))\n",
        "    model.add(Dropout(config.dropout))\n",
        "    # second model layer with dropout\n",
        "    model.add(LSTM(units=config.hidden_size, return_sequences=True, activation=config.activation))\n",
        "    model.add(Dropout(config.dropout))\n",
        "    # third model layer with dropout\n",
        "    model.add(LSTM(units=config.hidden_size, return_sequences=True, activation=config.activation))\n",
        "    model.add(Dropout(config.dropout))\n",
        "    # fourth model layer with dropout\n",
        "    model.add(LSTM(units=config.hidden_size, activation=config.activation))\n",
        "    model.add(Dropout(config.dropout))\n",
        "    # final layer with one output\n",
        "    model.add(Dense(units=1))\n",
        "\n",
        "    # Define the optimizer\n",
        "    if config.optimizer=='sgd':\n",
        "      optimizer = SGD(learning_rate=config.learning_rate, decay=1e-5, momentum=config.momentum, nesterov=True)\n",
        "    elif config.optimizer=='rmsprop':\n",
        "      optimizer = RMSprop(learning_rate=config.learning_rate, decay=1e-5)\n",
        "    elif config.optimizer=='adam':\n",
        "      optimizer = Adam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "    elif config.optimizer=='nadam':\n",
        "      optimizer = Nadam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "    model.compile(loss = \"mean_squared_error\", optimizer=optimizer, metrics=['mean_squared_error', 'mean_absolute_error'])\n",
        "\n",
        "    model.fit(X_val_train, y_val_train, batch_size=config.batch_size,\n",
        "              epochs=config.epochs,\n",
        "              validation_data=(X_val_test, y_val_test),\n",
        "              callbacks=[WandbCallback(validation_data=(X_val_test, y_val_test)),\n",
        "                          EarlyStopping(patience=10, restore_best_weights=True)])"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwZO6oAFU1LN",
        "outputId": "d5c58ad6-9c84-494e-9c84-fc93a9a2bca6"
      },
      "source": [
        "# setting up our sweep_id\n",
        "sweep_id = wandb.sweep(sweep_config, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Create sweep with ID: 9z361bjv\n",
            "Sweep URL: https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "1d1fd5183cee46ea8fa8cde390a2c54e",
            "fe0a4d3f04dc4828aef42d4261739ed6",
            "6188b5036c3a42dc9006a23308cb6e4b",
            "56b6ab4bb0714bf0abac5621ccc58b72",
            "350d0907452f4772b81b58234d67ef6d",
            "0aa359aa0f894e20964333fb5749cc6f",
            "97356a8720184107a160c005b9f123af",
            "c4f8410310b0427d95a7b449d1e45ba6",
            "0f6d3ab277ad483c92fbf02e20d406a4",
            "6c46ced9e83847678b71246116df0c38",
            "032c5094bed44fd8b8c4bdd835cd5e1a",
            "f5e474eeae4f4f87a98c778d0238d477",
            "a912719265e54996866722d3261ab70c",
            "cfe9266d5bfb4e46bcaae4da9276d97f",
            "387f525cccff4544a37a4dddd40fce93",
            "919f92ba4a0a4defa1ed3e588932816a",
            "a25e783ff61f49e38589a48cb4ca53a0",
            "8bf7ad52430b4b7abd9e64406b68b3b1",
            "2226dc9635044a9c97d8c3bbcc14bb40",
            "d2c65fe9428d47e197196437d1abfeac",
            "f629f578e20c48f6919b7c91e5186b53",
            "456a1e4ee8e340d7ab08f1f932994b40",
            "17d29c2a34c445e380fc1d1f48ecc165",
            "5bdb8537e7404bfc92fcb997ccef051e",
            "d88203f05ed14b58a75e57b5958e009f",
            "d90c9828801d4c9e96725d674376842e",
            "89d72eada28b47f8a25d2914c5350329",
            "eeb3e58c2a8d48d4bb37dfb55097deca",
            "32b00827b6cd466588a52e00fc0fdbf7",
            "71b0d8b2e32f447789faa35a8f9036d1",
            "10dc91bb9e714b2394228c31d53b4b1e",
            "9adaf11e7aa9423284c3ae049401ed30",
            "daa5528c59bc4f4598b6ba259357dda2",
            "e96374ae80394dcb8611429485d3baad",
            "df6d87fe7f77426cb4844b5c35254110",
            "e3281b1978f54d0a979588d50c884df3",
            "c109a4162d5046efaf3995eaf708e94c",
            "f74f024cdde14e56b4ff08341cd52372",
            "80094befe1484c5e971e210e41618ea5",
            "f6465fe9109149e8aeac41336dd6b6a4",
            "3e79d4f7b30d4de58a9e12f85c731e74",
            "5c40ad618479440cbbae9e7fe49d83db",
            "8d877cf80de94a2eac7c0cf98e2f41aa",
            "17553369fde44ca7bb53bef50c09b28d",
            "50a989f16a464f438ab583d8ca22428b",
            "760c391e4b084ede9c119b1fe02587e4",
            "46ff78563cf3413a8cccd849af83ca15",
            "4a8693dd85204d4f9a12a3c172ad9047"
          ]
        },
        "id": "ZfSCGWfluFw0",
        "outputId": "c698ddc7-b276-4973-e65e-c8746d4e9ecd"
      },
      "source": [
        "# initialising a new sweep\n",
        "wandb.agent(sweep_id, train, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: kt1pyfcw with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 32\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.3\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 25\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.0005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: rmsprop\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">decent-sweep-25</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/kt1pyfcw\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/kt1pyfcw</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_132930-kt1pyfcw</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "32/32 [==============================] - 8s 59ms/step - loss: 0.1075 - mean_squared_error: 0.1075 - mean_absolute_error: 0.2525 - val_loss: 0.0212 - val_mean_squared_error: 0.0212 - val_mean_absolute_error: 0.1173\n",
            "Epoch 2/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0162 - mean_squared_error: 0.0162 - mean_absolute_error: 0.1004 - val_loss: 0.0326 - val_mean_squared_error: 0.0326 - val_mean_absolute_error: 0.1480\n",
            "Epoch 3/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0200 - mean_squared_error: 0.0200 - mean_absolute_error: 0.1100 - val_loss: 0.0452 - val_mean_squared_error: 0.0452 - val_mean_absolute_error: 0.1795\n",
            "Epoch 4/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0168 - mean_squared_error: 0.0168 - mean_absolute_error: 0.1026 - val_loss: 0.0195 - val_mean_squared_error: 0.0195 - val_mean_absolute_error: 0.1171\n",
            "Epoch 5/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0158 - mean_squared_error: 0.0158 - mean_absolute_error: 0.0989 - val_loss: 0.0347 - val_mean_squared_error: 0.0347 - val_mean_absolute_error: 0.1538\n",
            "Epoch 6/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0139 - mean_squared_error: 0.0139 - mean_absolute_error: 0.0934 - val_loss: 0.0176 - val_mean_squared_error: 0.0176 - val_mean_absolute_error: 0.1093\n",
            "Epoch 7/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0136 - mean_squared_error: 0.0136 - mean_absolute_error: 0.0922 - val_loss: 0.0168 - val_mean_squared_error: 0.0168 - val_mean_absolute_error: 0.1093\n",
            "Epoch 8/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0135 - mean_squared_error: 0.0135 - mean_absolute_error: 0.0917 - val_loss: 0.0172 - val_mean_squared_error: 0.0172 - val_mean_absolute_error: 0.1113\n",
            "Epoch 9/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0143 - mean_squared_error: 0.0143 - mean_absolute_error: 0.0932 - val_loss: 0.0258 - val_mean_squared_error: 0.0258 - val_mean_absolute_error: 0.1304\n",
            "Epoch 10/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0128 - mean_squared_error: 0.0128 - mean_absolute_error: 0.0888 - val_loss: 0.0148 - val_mean_squared_error: 0.0148 - val_mean_absolute_error: 0.1019\n",
            "Epoch 11/50\n",
            "32/32 [==============================] - 0s 13ms/step - loss: 0.0120 - mean_squared_error: 0.0120 - mean_absolute_error: 0.0872 - val_loss: 0.0157 - val_mean_squared_error: 0.0157 - val_mean_absolute_error: 0.1010\n",
            "Epoch 12/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0131 - mean_squared_error: 0.0131 - mean_absolute_error: 0.0905 - val_loss: 0.0159 - val_mean_squared_error: 0.0159 - val_mean_absolute_error: 0.1011\n",
            "Epoch 13/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0113 - mean_squared_error: 0.0113 - mean_absolute_error: 0.0825 - val_loss: 0.0146 - val_mean_squared_error: 0.0146 - val_mean_absolute_error: 0.1017\n",
            "Epoch 14/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0115 - mean_squared_error: 0.0115 - mean_absolute_error: 0.0839 - val_loss: 0.0177 - val_mean_squared_error: 0.0177 - val_mean_absolute_error: 0.1065\n",
            "Epoch 15/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0110 - mean_squared_error: 0.0110 - mean_absolute_error: 0.0824 - val_loss: 0.0157 - val_mean_squared_error: 0.0157 - val_mean_absolute_error: 0.1002\n",
            "Epoch 16/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0122 - mean_squared_error: 0.0122 - mean_absolute_error: 0.0869 - val_loss: 0.0132 - val_mean_squared_error: 0.0132 - val_mean_absolute_error: 0.0923\n",
            "Epoch 17/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0090 - mean_squared_error: 0.0090 - mean_absolute_error: 0.0743 - val_loss: 0.0110 - val_mean_squared_error: 0.0110 - val_mean_absolute_error: 0.0873\n",
            "Epoch 18/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0109 - mean_squared_error: 0.0109 - mean_absolute_error: 0.0836 - val_loss: 0.0117 - val_mean_squared_error: 0.0117 - val_mean_absolute_error: 0.0876\n",
            "Epoch 19/50\n",
            "32/32 [==============================] - 0s 13ms/step - loss: 0.0094 - mean_squared_error: 0.0094 - mean_absolute_error: 0.0753 - val_loss: 0.0205 - val_mean_squared_error: 0.0205 - val_mean_absolute_error: 0.1170\n",
            "Epoch 20/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0092 - mean_squared_error: 0.0092 - mean_absolute_error: 0.0746 - val_loss: 0.0100 - val_mean_squared_error: 0.0100 - val_mean_absolute_error: 0.0814\n",
            "Epoch 21/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0097 - mean_squared_error: 0.0097 - mean_absolute_error: 0.0770 - val_loss: 0.0099 - val_mean_squared_error: 0.0099 - val_mean_absolute_error: 0.0814\n",
            "Epoch 22/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0094 - mean_squared_error: 0.0094 - mean_absolute_error: 0.0751 - val_loss: 0.0159 - val_mean_squared_error: 0.0159 - val_mean_absolute_error: 0.1043\n",
            "Epoch 23/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0091 - mean_squared_error: 0.0091 - mean_absolute_error: 0.0754 - val_loss: 0.0095 - val_mean_squared_error: 0.0095 - val_mean_absolute_error: 0.0802\n",
            "Epoch 24/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0093 - mean_squared_error: 0.0093 - mean_absolute_error: 0.0759 - val_loss: 0.0181 - val_mean_squared_error: 0.0181 - val_mean_absolute_error: 0.1101\n",
            "Epoch 25/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0085 - mean_squared_error: 0.0085 - mean_absolute_error: 0.0725 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0782\n",
            "Epoch 26/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0083 - mean_squared_error: 0.0083 - mean_absolute_error: 0.0713 - val_loss: 0.0087 - val_mean_squared_error: 0.0087 - val_mean_absolute_error: 0.0753\n",
            "Epoch 27/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - mean_absolute_error: 0.0696 - val_loss: 0.0095 - val_mean_squared_error: 0.0095 - val_mean_absolute_error: 0.0786\n",
            "Epoch 28/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0075 - mean_squared_error: 0.0075 - mean_absolute_error: 0.0687 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0778\n",
            "Epoch 29/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0076 - mean_squared_error: 0.0076 - mean_absolute_error: 0.0691 - val_loss: 0.0109 - val_mean_squared_error: 0.0109 - val_mean_absolute_error: 0.0840\n",
            "Epoch 30/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0068 - mean_squared_error: 0.0068 - mean_absolute_error: 0.0645 - val_loss: 0.0125 - val_mean_squared_error: 0.0125 - val_mean_absolute_error: 0.0901\n",
            "Epoch 31/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0077 - mean_squared_error: 0.0077 - mean_absolute_error: 0.0694 - val_loss: 0.0093 - val_mean_squared_error: 0.0093 - val_mean_absolute_error: 0.0773\n",
            "Epoch 32/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0071 - mean_squared_error: 0.0071 - mean_absolute_error: 0.0658 - val_loss: 0.0117 - val_mean_squared_error: 0.0117 - val_mean_absolute_error: 0.0873\n",
            "Epoch 33/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0078 - mean_squared_error: 0.0078 - mean_absolute_error: 0.0696 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0799\n",
            "Epoch 34/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0069 - mean_squared_error: 0.0069 - mean_absolute_error: 0.0646 - val_loss: 0.0081 - val_mean_squared_error: 0.0081 - val_mean_absolute_error: 0.0717\n",
            "Epoch 35/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0072 - mean_squared_error: 0.0072 - mean_absolute_error: 0.0674 - val_loss: 0.0148 - val_mean_squared_error: 0.0148 - val_mean_absolute_error: 0.0999\n",
            "Epoch 36/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0070 - mean_squared_error: 0.0070 - mean_absolute_error: 0.0649 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0798\n",
            "Epoch 37/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0061 - mean_squared_error: 0.0061 - mean_absolute_error: 0.0636 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0684\n",
            "Epoch 38/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0622 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0674\n",
            "Epoch 39/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0067 - mean_squared_error: 0.0067 - mean_absolute_error: 0.0647 - val_loss: 0.0082 - val_mean_squared_error: 0.0082 - val_mean_absolute_error: 0.0722\n",
            "Epoch 40/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0065 - mean_squared_error: 0.0065 - mean_absolute_error: 0.0637 - val_loss: 0.0088 - val_mean_squared_error: 0.0088 - val_mean_absolute_error: 0.0742\n",
            "Epoch 41/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0063 - mean_squared_error: 0.0063 - mean_absolute_error: 0.0614 - val_loss: 0.0073 - val_mean_squared_error: 0.0073 - val_mean_absolute_error: 0.0683\n",
            "Epoch 42/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0599 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0696\n",
            "Epoch 43/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0057 - mean_squared_error: 0.0057 - mean_absolute_error: 0.0603 - val_loss: 0.0100 - val_mean_squared_error: 0.0100 - val_mean_absolute_error: 0.0801\n",
            "Epoch 44/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0059 - mean_squared_error: 0.0059 - mean_absolute_error: 0.0608 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0669\n",
            "Epoch 45/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0059 - mean_squared_error: 0.0059 - mean_absolute_error: 0.0602 - val_loss: 0.0122 - val_mean_squared_error: 0.0122 - val_mean_absolute_error: 0.0899\n",
            "Epoch 46/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0059 - mean_squared_error: 0.0059 - mean_absolute_error: 0.0600 - val_loss: 0.0063 - val_mean_squared_error: 0.0063 - val_mean_absolute_error: 0.0623\n",
            "Epoch 47/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0055 - mean_squared_error: 0.0055 - mean_absolute_error: 0.0594 - val_loss: 0.0062 - val_mean_squared_error: 0.0062 - val_mean_absolute_error: 0.0618\n",
            "Epoch 48/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0555 - val_loss: 0.0065 - val_mean_squared_error: 0.0065 - val_mean_absolute_error: 0.0636\n",
            "Epoch 49/50\n",
            "32/32 [==============================] - 0s 12ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0584 - val_loss: 0.0061 - val_mean_squared_error: 0.0061 - val_mean_absolute_error: 0.0609\n",
            "Epoch 50/50\n",
            "32/32 [==============================] - 0s 11ms/step - loss: 0.0051 - mean_squared_error: 0.0051 - mean_absolute_error: 0.0551 - val_loss: 0.0070 - val_mean_squared_error: 0.0070 - val_mean_absolute_error: 0.0659\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 7369<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "1d1fd5183cee46ea8fa8cde390a2c54e",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 0.50MB of 0.50MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_132930-kt1pyfcw/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_132930-kt1pyfcw/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>49</td></tr><tr><td>loss</td><td>0.00518</td></tr><tr><td>mean_squared_error</td><td>0.00518</td></tr><tr><td>mean_absolute_error</td><td>0.05616</td></tr><tr><td>val_loss</td><td>0.00697</td></tr><tr><td>val_mean_squared_error</td><td>0.00697</td></tr><tr><td>val_mean_absolute_error</td><td>0.06593</td></tr><tr><td>_runtime</td><td>31</td></tr><tr><td>_timestamp</td><td>1626269401</td></tr><tr><td>_step</td><td>49</td></tr><tr><td>best_val_loss</td><td>0.00607</td></tr><tr><td>best_epoch</td><td>48</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▄▄▄▃▃▃▃▃▃▃▃▃▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▂▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>▄▆█▃▃▃▃▅▃▃▃▃▂▂▂▄▂▃▂▃▁▂▂▂▂▂▂▁▂▁▁▁▁▁▂▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>▄▆█▃▃▃▃▅▃▃▃▃▂▂▂▄▂▃▂▃▁▂▂▂▂▂▂▁▂▁▁▁▁▁▂▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>▄▆█▄▄▄▄▅▃▃▃▄▃▃▃▄▂▄▂▄▂▂▂▂▂▃▂▂▂▁▁▂▁▁▂▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▁▂▂▂▂▂▂▂▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▇▇▇▇▇████</td></tr><tr><td>_timestamp</td><td>▁▁▁▁▂▂▂▂▂▂▂▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▇▇▇▇▇████</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">decent-sweep-25</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/kt1pyfcw\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/kt1pyfcw</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: fk5ydm8r with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 128\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.2\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.0005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: adam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">comfy-sweep-26</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/fk5ydm8r\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/fk5ydm8r</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_133010-fk5ydm8r</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "8/8 [==============================] - 8s 224ms/step - loss: 0.2007 - mean_squared_error: 0.2007 - mean_absolute_error: 0.3947 - val_loss: 0.0571 - val_mean_squared_error: 0.0571 - val_mean_absolute_error: 0.1993\n",
            "Epoch 2/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0373 - mean_squared_error: 0.0373 - mean_absolute_error: 0.1604 - val_loss: 0.0522 - val_mean_squared_error: 0.0522 - val_mean_absolute_error: 0.1955\n",
            "Epoch 3/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0203 - mean_squared_error: 0.0203 - mean_absolute_error: 0.1189 - val_loss: 0.0181 - val_mean_squared_error: 0.0181 - val_mean_absolute_error: 0.1143\n",
            "Epoch 4/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0136 - mean_squared_error: 0.0136 - mean_absolute_error: 0.0933 - val_loss: 0.0252 - val_mean_squared_error: 0.0252 - val_mean_absolute_error: 0.1270\n",
            "Epoch 5/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0114 - mean_squared_error: 0.0114 - mean_absolute_error: 0.0868 - val_loss: 0.0174 - val_mean_squared_error: 0.0174 - val_mean_absolute_error: 0.1083\n",
            "Epoch 6/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0099 - mean_squared_error: 0.0099 - mean_absolute_error: 0.0788 - val_loss: 0.0190 - val_mean_squared_error: 0.0190 - val_mean_absolute_error: 0.1103\n",
            "Epoch 7/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0091 - mean_squared_error: 0.0091 - mean_absolute_error: 0.0760 - val_loss: 0.0178 - val_mean_squared_error: 0.0178 - val_mean_absolute_error: 0.1094\n",
            "Epoch 8/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0080 - mean_squared_error: 0.0080 - mean_absolute_error: 0.0706 - val_loss: 0.0184 - val_mean_squared_error: 0.0184 - val_mean_absolute_error: 0.1103\n",
            "Epoch 9/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0082 - mean_squared_error: 0.0082 - mean_absolute_error: 0.0719 - val_loss: 0.0179 - val_mean_squared_error: 0.0179 - val_mean_absolute_error: 0.1107\n",
            "Epoch 10/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0079 - mean_squared_error: 0.0079 - mean_absolute_error: 0.0695 - val_loss: 0.0184 - val_mean_squared_error: 0.0184 - val_mean_absolute_error: 0.1109\n",
            "Epoch 11/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - mean_absolute_error: 0.0706 - val_loss: 0.0180 - val_mean_squared_error: 0.0180 - val_mean_absolute_error: 0.1107\n",
            "Epoch 12/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0071 - mean_squared_error: 0.0071 - mean_absolute_error: 0.0654 - val_loss: 0.0179 - val_mean_squared_error: 0.0179 - val_mean_absolute_error: 0.1098\n",
            "Epoch 13/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0073 - mean_squared_error: 0.0073 - mean_absolute_error: 0.0666 - val_loss: 0.0174 - val_mean_squared_error: 0.0174 - val_mean_absolute_error: 0.1092\n",
            "Epoch 14/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0073 - mean_squared_error: 0.0073 - mean_absolute_error: 0.0667 - val_loss: 0.0171 - val_mean_squared_error: 0.0171 - val_mean_absolute_error: 0.1086\n",
            "Epoch 15/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0077 - mean_squared_error: 0.0077 - mean_absolute_error: 0.0686 - val_loss: 0.0173 - val_mean_squared_error: 0.0173 - val_mean_absolute_error: 0.1074\n",
            "Epoch 16/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0073 - mean_squared_error: 0.0073 - mean_absolute_error: 0.0664 - val_loss: 0.0174 - val_mean_squared_error: 0.0174 - val_mean_absolute_error: 0.1070\n",
            "Epoch 17/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0074 - mean_squared_error: 0.0074 - mean_absolute_error: 0.0669 - val_loss: 0.0168 - val_mean_squared_error: 0.0168 - val_mean_absolute_error: 0.1055\n",
            "Epoch 18/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0072 - mean_squared_error: 0.0072 - mean_absolute_error: 0.0670 - val_loss: 0.0161 - val_mean_squared_error: 0.0161 - val_mean_absolute_error: 0.1045\n",
            "Epoch 19/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0067 - mean_squared_error: 0.0067 - mean_absolute_error: 0.0642 - val_loss: 0.0160 - val_mean_squared_error: 0.0160 - val_mean_absolute_error: 0.1034\n",
            "Epoch 20/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0068 - mean_squared_error: 0.0068 - mean_absolute_error: 0.0649 - val_loss: 0.0162 - val_mean_squared_error: 0.0162 - val_mean_absolute_error: 0.1033\n",
            "Epoch 21/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0068 - mean_squared_error: 0.0068 - mean_absolute_error: 0.0660 - val_loss: 0.0151 - val_mean_squared_error: 0.0151 - val_mean_absolute_error: 0.1012\n",
            "Epoch 22/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0067 - mean_squared_error: 0.0067 - mean_absolute_error: 0.0635 - val_loss: 0.0147 - val_mean_squared_error: 0.0147 - val_mean_absolute_error: 0.1002\n",
            "Epoch 23/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0065 - mean_squared_error: 0.0065 - mean_absolute_error: 0.0630 - val_loss: 0.0145 - val_mean_squared_error: 0.0145 - val_mean_absolute_error: 0.1008\n",
            "Epoch 24/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0069 - mean_squared_error: 0.0069 - mean_absolute_error: 0.0647 - val_loss: 0.0142 - val_mean_squared_error: 0.0142 - val_mean_absolute_error: 0.0996\n",
            "Epoch 25/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0064 - mean_squared_error: 0.0064 - mean_absolute_error: 0.0629 - val_loss: 0.0138 - val_mean_squared_error: 0.0138 - val_mean_absolute_error: 0.0974\n",
            "Epoch 26/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0602 - val_loss: 0.0136 - val_mean_squared_error: 0.0136 - val_mean_absolute_error: 0.0959\n",
            "Epoch 27/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0061 - mean_squared_error: 0.0061 - mean_absolute_error: 0.0614 - val_loss: 0.0131 - val_mean_squared_error: 0.0131 - val_mean_absolute_error: 0.0948\n",
            "Epoch 28/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0062 - mean_squared_error: 0.0062 - mean_absolute_error: 0.0608 - val_loss: 0.0126 - val_mean_squared_error: 0.0126 - val_mean_absolute_error: 0.0931\n",
            "Epoch 29/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0605 - val_loss: 0.0125 - val_mean_squared_error: 0.0125 - val_mean_absolute_error: 0.0915\n",
            "Epoch 30/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0062 - mean_squared_error: 0.0062 - mean_absolute_error: 0.0617 - val_loss: 0.0119 - val_mean_squared_error: 0.0119 - val_mean_absolute_error: 0.0899\n",
            "Epoch 31/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0058 - mean_squared_error: 0.0058 - mean_absolute_error: 0.0588 - val_loss: 0.0117 - val_mean_squared_error: 0.0117 - val_mean_absolute_error: 0.0894\n",
            "Epoch 32/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0061 - mean_squared_error: 0.0061 - mean_absolute_error: 0.0618 - val_loss: 0.0115 - val_mean_squared_error: 0.0115 - val_mean_absolute_error: 0.0890\n",
            "Epoch 33/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0061 - mean_squared_error: 0.0061 - mean_absolute_error: 0.0614 - val_loss: 0.0113 - val_mean_squared_error: 0.0113 - val_mean_absolute_error: 0.0869\n",
            "Epoch 34/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0055 - mean_squared_error: 0.0055 - mean_absolute_error: 0.0587 - val_loss: 0.0107 - val_mean_squared_error: 0.0107 - val_mean_absolute_error: 0.0855\n",
            "Epoch 35/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0578 - val_loss: 0.0105 - val_mean_squared_error: 0.0105 - val_mean_absolute_error: 0.0845\n",
            "Epoch 36/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0574 - val_loss: 0.0106 - val_mean_squared_error: 0.0106 - val_mean_absolute_error: 0.0851\n",
            "Epoch 37/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0053 - mean_squared_error: 0.0053 - mean_absolute_error: 0.0564 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0824\n",
            "Epoch 38/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0607 - val_loss: 0.0100 - val_mean_squared_error: 0.0100 - val_mean_absolute_error: 0.0816\n",
            "Epoch 39/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0580 - val_loss: 0.0099 - val_mean_squared_error: 0.0099 - val_mean_absolute_error: 0.0819\n",
            "Epoch 40/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0553 - val_loss: 0.0098 - val_mean_squared_error: 0.0098 - val_mean_absolute_error: 0.0813\n",
            "Epoch 41/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0052 - mean_squared_error: 0.0052 - mean_absolute_error: 0.0553 - val_loss: 0.0097 - val_mean_squared_error: 0.0097 - val_mean_absolute_error: 0.0801\n",
            "Epoch 42/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0050 - mean_squared_error: 0.0050 - mean_absolute_error: 0.0551 - val_loss: 0.0100 - val_mean_squared_error: 0.0100 - val_mean_absolute_error: 0.0807\n",
            "Epoch 43/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0055 - mean_squared_error: 0.0055 - mean_absolute_error: 0.0584 - val_loss: 0.0092 - val_mean_squared_error: 0.0092 - val_mean_absolute_error: 0.0785\n",
            "Epoch 44/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0051 - mean_squared_error: 0.0051 - mean_absolute_error: 0.0567 - val_loss: 0.0092 - val_mean_squared_error: 0.0092 - val_mean_absolute_error: 0.0787\n",
            "Epoch 45/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0052 - mean_squared_error: 0.0052 - mean_absolute_error: 0.0573 - val_loss: 0.0091 - val_mean_squared_error: 0.0091 - val_mean_absolute_error: 0.0777\n",
            "Epoch 46/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0543 - val_loss: 0.0089 - val_mean_squared_error: 0.0089 - val_mean_absolute_error: 0.0773\n",
            "Epoch 47/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0050 - mean_squared_error: 0.0050 - mean_absolute_error: 0.0551 - val_loss: 0.0089 - val_mean_squared_error: 0.0089 - val_mean_absolute_error: 0.0765\n",
            "Epoch 48/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0050 - mean_squared_error: 0.0050 - mean_absolute_error: 0.0558 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0783\n",
            "Epoch 49/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0053 - mean_squared_error: 0.0053 - mean_absolute_error: 0.0572 - val_loss: 0.0090 - val_mean_squared_error: 0.0090 - val_mean_absolute_error: 0.0767\n",
            "Epoch 50/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0544 - val_loss: 0.0087 - val_mean_squared_error: 0.0087 - val_mean_absolute_error: 0.0763\n",
            "Epoch 51/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0528 - val_loss: 0.0086 - val_mean_squared_error: 0.0086 - val_mean_absolute_error: 0.0753\n",
            "Epoch 52/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0552 - val_loss: 0.0085 - val_mean_squared_error: 0.0085 - val_mean_absolute_error: 0.0747\n",
            "Epoch 53/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0527 - val_loss: 0.0084 - val_mean_squared_error: 0.0084 - val_mean_absolute_error: 0.0742\n",
            "Epoch 54/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0538 - val_loss: 0.0085 - val_mean_squared_error: 0.0085 - val_mean_absolute_error: 0.0742\n",
            "Epoch 55/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0051 - mean_squared_error: 0.0051 - mean_absolute_error: 0.0559 - val_loss: 0.0081 - val_mean_squared_error: 0.0081 - val_mean_absolute_error: 0.0728\n",
            "Epoch 56/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0517 - val_loss: 0.0081 - val_mean_squared_error: 0.0081 - val_mean_absolute_error: 0.0728\n",
            "Epoch 57/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0541 - val_loss: 0.0082 - val_mean_squared_error: 0.0082 - val_mean_absolute_error: 0.0728\n",
            "Epoch 58/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0532 - val_loss: 0.0088 - val_mean_squared_error: 0.0088 - val_mean_absolute_error: 0.0753\n",
            "Epoch 59/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0531 - val_loss: 0.0080 - val_mean_squared_error: 0.0080 - val_mean_absolute_error: 0.0721\n",
            "Epoch 60/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0543 - val_loss: 0.0080 - val_mean_squared_error: 0.0080 - val_mean_absolute_error: 0.0723\n",
            "Epoch 61/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0525 - val_loss: 0.0080 - val_mean_squared_error: 0.0080 - val_mean_absolute_error: 0.0720\n",
            "Epoch 62/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0528 - val_loss: 0.0081 - val_mean_squared_error: 0.0081 - val_mean_absolute_error: 0.0722\n",
            "Epoch 63/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0042 - mean_squared_error: 0.0042 - mean_absolute_error: 0.0503 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0701\n",
            "Epoch 64/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0042 - mean_squared_error: 0.0042 - mean_absolute_error: 0.0511 - val_loss: 0.0085 - val_mean_squared_error: 0.0085 - val_mean_absolute_error: 0.0745\n",
            "Epoch 65/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0551 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0703\n",
            "Epoch 66/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0498 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0705\n",
            "Epoch 67/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0522 - val_loss: 0.0084 - val_mean_squared_error: 0.0084 - val_mean_absolute_error: 0.0733\n",
            "Epoch 68/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0046 - mean_squared_error: 0.0046 - mean_absolute_error: 0.0535 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0687\n",
            "Epoch 69/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0498 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0702\n",
            "Epoch 70/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0042 - mean_squared_error: 0.0042 - mean_absolute_error: 0.0514 - val_loss: 0.0082 - val_mean_squared_error: 0.0082 - val_mean_absolute_error: 0.0725\n",
            "Epoch 71/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0525 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0685\n",
            "Epoch 72/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0527 - val_loss: 0.0076 - val_mean_squared_error: 0.0076 - val_mean_absolute_error: 0.0699\n",
            "Epoch 73/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0522 - val_loss: 0.0092 - val_mean_squared_error: 0.0092 - val_mean_absolute_error: 0.0765\n",
            "Epoch 74/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0510 - val_loss: 0.0080 - val_mean_squared_error: 0.0080 - val_mean_absolute_error: 0.0715\n",
            "Epoch 75/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0046 - mean_squared_error: 0.0046 - mean_absolute_error: 0.0537 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0674\n",
            "Epoch 76/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0525 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0673\n",
            "Epoch 77/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0501 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0677\n",
            "Epoch 78/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0513 - val_loss: 0.0073 - val_mean_squared_error: 0.0073 - val_mean_absolute_error: 0.0683\n",
            "Epoch 79/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0488 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0677\n",
            "Epoch 80/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0502 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0659\n",
            "Epoch 81/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0519 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0681\n",
            "Epoch 82/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0527 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0658\n",
            "Epoch 83/100\n",
            "8/8 [==============================] - 0s 15ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0497 - val_loss: 0.0070 - val_mean_squared_error: 0.0070 - val_mean_absolute_error: 0.0658\n",
            "Epoch 84/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0513 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0657\n",
            "Epoch 85/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0495 - val_loss: 0.0068 - val_mean_squared_error: 0.0068 - val_mean_absolute_error: 0.0651\n",
            "Epoch 86/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0486 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0652\n",
            "Epoch 87/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0490 - val_loss: 0.0068 - val_mean_squared_error: 0.0068 - val_mean_absolute_error: 0.0657\n",
            "Epoch 88/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0498 - val_loss: 0.0079 - val_mean_squared_error: 0.0079 - val_mean_absolute_error: 0.0707\n",
            "Epoch 89/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0517 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0671\n",
            "Epoch 90/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0520 - val_loss: 0.0066 - val_mean_squared_error: 0.0066 - val_mean_absolute_error: 0.0639\n",
            "Epoch 91/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0485 - val_loss: 0.0066 - val_mean_squared_error: 0.0066 - val_mean_absolute_error: 0.0643\n",
            "Epoch 92/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0474 - val_loss: 0.0067 - val_mean_squared_error: 0.0067 - val_mean_absolute_error: 0.0649\n",
            "Epoch 93/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0480 - val_loss: 0.0068 - val_mean_squared_error: 0.0068 - val_mean_absolute_error: 0.0655\n",
            "Epoch 94/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0507 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0672\n",
            "Epoch 95/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0477 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0669\n",
            "Epoch 96/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0471 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0657\n",
            "Epoch 97/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0476 - val_loss: 0.0064 - val_mean_squared_error: 0.0064 - val_mean_absolute_error: 0.0632\n",
            "Epoch 98/100\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0489 - val_loss: 0.0064 - val_mean_squared_error: 0.0064 - val_mean_absolute_error: 0.0629\n",
            "Epoch 99/100\n",
            "8/8 [==============================] - 0s 17ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0488 - val_loss: 0.0063 - val_mean_squared_error: 0.0063 - val_mean_absolute_error: 0.0627\n",
            "Epoch 100/100\n",
            "8/8 [==============================] - 0s 16ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0492 - val_loss: 0.0064 - val_mean_squared_error: 0.0064 - val_mean_absolute_error: 0.0626\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 7576<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0f6d3ab277ad483c92fbf02e20d406a4",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 0.28MB of 0.28MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133010-fk5ydm8r/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133010-fk5ydm8r/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>99</td></tr><tr><td>loss</td><td>0.00392</td></tr><tr><td>mean_squared_error</td><td>0.00392</td></tr><tr><td>mean_absolute_error</td><td>0.04961</td></tr><tr><td>val_loss</td><td>0.00637</td></tr><tr><td>val_mean_squared_error</td><td>0.00637</td></tr><tr><td>val_mean_absolute_error</td><td>0.06258</td></tr><tr><td>_runtime</td><td>28</td></tr><tr><td>_timestamp</td><td>1626269438</td></tr><tr><td>_step</td><td>99</td></tr><tr><td>best_val_loss</td><td>0.00635</td></tr><tr><td>best_epoch</td><td>98</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▃▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>█▃▃▃▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>█▃▃▃▃▃▃▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>█▄▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▁▁▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▁▂▂▂▂▂▂▃▃▃▃▄▄▄▄▅▅▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇████</td></tr><tr><td>_timestamp</td><td>▁▁▁▁▂▂▂▂▂▂▃▃▃▃▄▄▄▄▅▅▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇████</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">comfy-sweep-26</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/fk5ydm8r\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/fk5ydm8r</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: vbwokatm with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 64\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.4\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 25\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: adam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">whole-sweep-27</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/vbwokatm\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/vbwokatm</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_133048-vbwokatm</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "16/16 [==============================] - 8s 114ms/step - loss: 0.1079 - mean_squared_error: 0.1079 - mean_absolute_error: 0.2661 - val_loss: 0.0416 - val_mean_squared_error: 0.0416 - val_mean_absolute_error: 0.1684\n",
            "Epoch 2/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0251 - mean_squared_error: 0.0251 - mean_absolute_error: 0.1269 - val_loss: 0.0323 - val_mean_squared_error: 0.0323 - val_mean_absolute_error: 0.1491\n",
            "Epoch 3/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0183 - mean_squared_error: 0.0183 - mean_absolute_error: 0.1060 - val_loss: 0.0133 - val_mean_squared_error: 0.0133 - val_mean_absolute_error: 0.0964\n",
            "Epoch 4/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0128 - mean_squared_error: 0.0128 - mean_absolute_error: 0.0906 - val_loss: 0.0134 - val_mean_squared_error: 0.0134 - val_mean_absolute_error: 0.0947\n",
            "Epoch 5/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0113 - mean_squared_error: 0.0113 - mean_absolute_error: 0.0840 - val_loss: 0.0132 - val_mean_squared_error: 0.0132 - val_mean_absolute_error: 0.0937\n",
            "Epoch 6/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0113 - mean_squared_error: 0.0113 - mean_absolute_error: 0.0847 - val_loss: 0.0111 - val_mean_squared_error: 0.0111 - val_mean_absolute_error: 0.0868\n",
            "Epoch 7/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0110 - mean_squared_error: 0.0110 - mean_absolute_error: 0.0824 - val_loss: 0.0103 - val_mean_squared_error: 0.0103 - val_mean_absolute_error: 0.0834\n",
            "Epoch 8/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0104 - mean_squared_error: 0.0104 - mean_absolute_error: 0.0805 - val_loss: 0.0146 - val_mean_squared_error: 0.0146 - val_mean_absolute_error: 0.0974\n",
            "Epoch 9/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0090 - mean_squared_error: 0.0090 - mean_absolute_error: 0.0747 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0789\n",
            "Epoch 10/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0088 - mean_squared_error: 0.0088 - mean_absolute_error: 0.0728 - val_loss: 0.0091 - val_mean_squared_error: 0.0091 - val_mean_absolute_error: 0.0778\n",
            "Epoch 11/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - mean_absolute_error: 0.0712 - val_loss: 0.0106 - val_mean_squared_error: 0.0106 - val_mean_absolute_error: 0.0836\n",
            "Epoch 12/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0092 - mean_squared_error: 0.0092 - mean_absolute_error: 0.0754 - val_loss: 0.0090 - val_mean_squared_error: 0.0090 - val_mean_absolute_error: 0.0762\n",
            "Epoch 13/50\n",
            "16/16 [==============================] - 0s 15ms/step - loss: 0.0081 - mean_squared_error: 0.0081 - mean_absolute_error: 0.0710 - val_loss: 0.0084 - val_mean_squared_error: 0.0084 - val_mean_absolute_error: 0.0739\n",
            "Epoch 14/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0078 - mean_squared_error: 0.0078 - mean_absolute_error: 0.0701 - val_loss: 0.0076 - val_mean_squared_error: 0.0076 - val_mean_absolute_error: 0.0700\n",
            "Epoch 15/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0086 - mean_squared_error: 0.0086 - mean_absolute_error: 0.0723 - val_loss: 0.0085 - val_mean_squared_error: 0.0085 - val_mean_absolute_error: 0.0732\n",
            "Epoch 16/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0068 - mean_squared_error: 0.0068 - mean_absolute_error: 0.0654 - val_loss: 0.0079 - val_mean_squared_error: 0.0079 - val_mean_absolute_error: 0.0711\n",
            "Epoch 17/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0065 - mean_squared_error: 0.0065 - mean_absolute_error: 0.0621 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0673\n",
            "Epoch 18/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0062 - mean_squared_error: 0.0062 - mean_absolute_error: 0.0636 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0672\n",
            "Epoch 19/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0058 - mean_squared_error: 0.0058 - mean_absolute_error: 0.0614 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0698\n",
            "Epoch 20/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0055 - mean_squared_error: 0.0055 - mean_absolute_error: 0.0588 - val_loss: 0.0070 - val_mean_squared_error: 0.0070 - val_mean_absolute_error: 0.0658\n",
            "Epoch 21/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0062 - mean_squared_error: 0.0062 - mean_absolute_error: 0.0617 - val_loss: 0.0064 - val_mean_squared_error: 0.0064 - val_mean_absolute_error: 0.0627\n",
            "Epoch 22/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0553 - val_loss: 0.0067 - val_mean_squared_error: 0.0067 - val_mean_absolute_error: 0.0637\n",
            "Epoch 23/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0542 - val_loss: 0.0073 - val_mean_squared_error: 0.0073 - val_mean_absolute_error: 0.0672\n",
            "Epoch 24/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0053 - mean_squared_error: 0.0053 - mean_absolute_error: 0.0559 - val_loss: 0.0098 - val_mean_squared_error: 0.0098 - val_mean_absolute_error: 0.0794\n",
            "Epoch 25/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0580 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0678\n",
            "Epoch 26/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0552 - val_loss: 0.0073 - val_mean_squared_error: 0.0073 - val_mean_absolute_error: 0.0671\n",
            "Epoch 27/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0534 - val_loss: 0.0058 - val_mean_squared_error: 0.0058 - val_mean_absolute_error: 0.0594\n",
            "Epoch 28/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0044 - mean_squared_error: 0.0044 - mean_absolute_error: 0.0526 - val_loss: 0.0062 - val_mean_squared_error: 0.0062 - val_mean_absolute_error: 0.0603\n",
            "Epoch 29/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0525 - val_loss: 0.0053 - val_mean_squared_error: 0.0053 - val_mean_absolute_error: 0.0562\n",
            "Epoch 30/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0513 - val_loss: 0.0051 - val_mean_squared_error: 0.0051 - val_mean_absolute_error: 0.0553\n",
            "Epoch 31/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0042 - mean_squared_error: 0.0042 - mean_absolute_error: 0.0510 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0582\n",
            "Epoch 32/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0036 - mean_squared_error: 0.0036 - mean_absolute_error: 0.0465 - val_loss: 0.0056 - val_mean_squared_error: 0.0056 - val_mean_absolute_error: 0.0587\n",
            "Epoch 33/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0513 - val_loss: 0.0054 - val_mean_squared_error: 0.0054 - val_mean_absolute_error: 0.0574\n",
            "Epoch 34/50\n",
            "16/16 [==============================] - 0s 15ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0475 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0545\n",
            "Epoch 35/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0036 - mean_squared_error: 0.0036 - mean_absolute_error: 0.0472 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0539\n",
            "Epoch 36/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0033 - mean_squared_error: 0.0033 - mean_absolute_error: 0.0457 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0521\n",
            "Epoch 37/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0481 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0531\n",
            "Epoch 38/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0036 - mean_squared_error: 0.0036 - mean_absolute_error: 0.0468 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0518\n",
            "Epoch 39/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0448 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0521\n",
            "Epoch 40/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0446 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0524\n",
            "Epoch 41/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0452 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0497\n",
            "Epoch 42/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0450 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0501\n",
            "Epoch 43/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0446 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0498\n",
            "Epoch 44/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0463 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0492\n",
            "Epoch 45/50\n",
            "16/16 [==============================] - 0s 13ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0450 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0491\n",
            "Epoch 46/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0030 - mean_squared_error: 0.0030 - mean_absolute_error: 0.0421 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0484\n",
            "Epoch 47/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0475 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0476\n",
            "Epoch 48/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0474 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0471\n",
            "Epoch 49/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0441 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0476\n",
            "Epoch 50/50\n",
            "16/16 [==============================] - 0s 14ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0440 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0470\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 7931<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a25e783ff61f49e38589a48cb4ca53a0",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 0.43MB of 0.43MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133048-vbwokatm/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133048-vbwokatm/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>49</td></tr><tr><td>loss</td><td>0.00317</td></tr><tr><td>mean_squared_error</td><td>0.00317</td></tr><tr><td>mean_absolute_error</td><td>0.0444</td></tr><tr><td>val_loss</td><td>0.00357</td></tr><tr><td>val_mean_squared_error</td><td>0.00357</td></tr><tr><td>val_mean_absolute_error</td><td>0.04698</td></tr><tr><td>_runtime</td><td>25</td></tr><tr><td>_timestamp</td><td>1626269473</td></tr><tr><td>_step</td><td>49</td></tr><tr><td>best_val_loss</td><td>0.00357</td></tr><tr><td>best_epoch</td><td>49</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▃▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▄▄▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>█▆▃▃▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>█▆▃▃▂▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>█▇▄▄▃▃▄▃▃▃▃▂▂▂▂▂▂▂▂▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▂▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇▇█</td></tr><tr><td>_timestamp</td><td>▁▂▂▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇▇█</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">whole-sweep-27</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/vbwokatm\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/vbwokatm</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: cznnae36 with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 128\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.3\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 25\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.0005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: nadam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">ancient-sweep-28</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/cznnae36\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/cznnae36</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_133129-cznnae36</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "8/8 [==============================] - 8s 304ms/step - loss: 0.2554 - mean_squared_error: 0.2554 - mean_absolute_error: 0.4685 - val_loss: 0.1785 - val_mean_squared_error: 0.1785 - val_mean_absolute_error: 0.3996\n",
            "Epoch 2/50\n",
            "8/8 [==============================] - 0s 19ms/step - loss: 0.0684 - mean_squared_error: 0.0684 - mean_absolute_error: 0.2151 - val_loss: 0.0197 - val_mean_squared_error: 0.0197 - val_mean_absolute_error: 0.1179\n",
            "Epoch 3/50\n",
            "8/8 [==============================] - 0s 19ms/step - loss: 0.0257 - mean_squared_error: 0.0257 - mean_absolute_error: 0.1277 - val_loss: 0.0228 - val_mean_squared_error: 0.0228 - val_mean_absolute_error: 0.1215\n",
            "Epoch 4/50\n",
            "8/8 [==============================] - 0s 19ms/step - loss: 0.0235 - mean_squared_error: 0.0235 - mean_absolute_error: 0.1225 - val_loss: 0.0241 - val_mean_squared_error: 0.0241 - val_mean_absolute_error: 0.1240\n",
            "Epoch 5/50\n",
            "8/8 [==============================] - 0s 20ms/step - loss: 0.0194 - mean_squared_error: 0.0194 - mean_absolute_error: 0.1096 - val_loss: 0.0208 - val_mean_squared_error: 0.0208 - val_mean_absolute_error: 0.1172\n",
            "Epoch 6/50\n",
            "8/8 [==============================] - 0s 21ms/step - loss: 0.0189 - mean_squared_error: 0.0189 - mean_absolute_error: 0.1088 - val_loss: 0.0223 - val_mean_squared_error: 0.0223 - val_mean_absolute_error: 0.1196\n",
            "Epoch 7/50\n",
            "8/8 [==============================] - 0s 19ms/step - loss: 0.0158 - mean_squared_error: 0.0158 - mean_absolute_error: 0.0987 - val_loss: 0.0207 - val_mean_squared_error: 0.0207 - val_mean_absolute_error: 0.1180\n",
            "Epoch 8/50\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0161 - mean_squared_error: 0.0161 - mean_absolute_error: 0.0994 - val_loss: 0.0204 - val_mean_squared_error: 0.0204 - val_mean_absolute_error: 0.1188\n",
            "Epoch 9/50\n",
            "8/8 [==============================] - 0s 21ms/step - loss: 0.0153 - mean_squared_error: 0.0153 - mean_absolute_error: 0.0979 - val_loss: 0.0208 - val_mean_squared_error: 0.0208 - val_mean_absolute_error: 0.1177\n",
            "Epoch 10/50\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0140 - mean_squared_error: 0.0140 - mean_absolute_error: 0.0920 - val_loss: 0.0203 - val_mean_squared_error: 0.0203 - val_mean_absolute_error: 0.1178\n",
            "Epoch 11/50\n",
            "8/8 [==============================] - 0s 18ms/step - loss: 0.0144 - mean_squared_error: 0.0144 - mean_absolute_error: 0.0964 - val_loss: 0.0202 - val_mean_squared_error: 0.0202 - val_mean_absolute_error: 0.1185\n",
            "Epoch 12/50\n",
            "8/8 [==============================] - 0s 19ms/step - loss: 0.0150 - mean_squared_error: 0.0150 - mean_absolute_error: 0.0963 - val_loss: 0.0203 - val_mean_squared_error: 0.0203 - val_mean_absolute_error: 0.1173\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 8136<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "d88203f05ed14b58a75e57b5958e009f",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 1.10MB of 1.10MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133129-cznnae36/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133129-cznnae36/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>11</td></tr><tr><td>loss</td><td>0.01479</td></tr><tr><td>mean_squared_error</td><td>0.01479</td></tr><tr><td>mean_absolute_error</td><td>0.09593</td></tr><tr><td>val_loss</td><td>0.02026</td></tr><tr><td>val_mean_squared_error</td><td>0.02026</td></tr><tr><td>val_mean_absolute_error</td><td>0.11729</td></tr><tr><td>_runtime</td><td>14</td></tr><tr><td>_timestamp</td><td>1626269503</td></tr><tr><td>_step</td><td>11</td></tr><tr><td>best_val_loss</td><td>0.01966</td></tr><tr><td>best_epoch</td><td>1</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▂▂▃▄▄▅▅▆▇▇█</td></tr><tr><td>loss</td><td>█▂▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▂▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▃▂▂▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>█▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>█▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>█▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▅▅▅▅▅▅▅███</td></tr><tr><td>_timestamp</td><td>▁▁▅▅▅▅▅▅▅███</td></tr><tr><td>_step</td><td>▁▂▂▃▄▄▅▅▆▇▇█</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">ancient-sweep-28</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/cznnae36\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/cznnae36</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: gm91oqsx with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 32\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.4\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 200\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: nadam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">lemon-sweep-29</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/gm91oqsx\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/gm91oqsx</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_133153-gm91oqsx</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/200\n",
            "32/32 [==============================] - 8s 62ms/step - loss: 0.6599 - mean_squared_error: 0.6599 - mean_absolute_error: 0.3931 - val_loss: 0.0223 - val_mean_squared_error: 0.0223 - val_mean_absolute_error: 0.1197\n",
            "Epoch 2/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0209 - mean_squared_error: 0.0209 - mean_absolute_error: 0.1121 - val_loss: 0.0212 - val_mean_squared_error: 0.0212 - val_mean_absolute_error: 0.1170\n",
            "Epoch 3/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0128 - mean_squared_error: 0.0128 - mean_absolute_error: 0.0896 - val_loss: 0.0410 - val_mean_squared_error: 0.0410 - val_mean_absolute_error: 0.1765\n",
            "Epoch 4/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0107 - mean_squared_error: 0.0107 - mean_absolute_error: 0.0834 - val_loss: 0.0135 - val_mean_squared_error: 0.0135 - val_mean_absolute_error: 0.0964\n",
            "Epoch 5/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0085 - mean_squared_error: 0.0085 - mean_absolute_error: 0.0733 - val_loss: 0.0210 - val_mean_squared_error: 0.0210 - val_mean_absolute_error: 0.1205\n",
            "Epoch 6/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0091 - mean_squared_error: 0.0091 - mean_absolute_error: 0.0754 - val_loss: 0.0079 - val_mean_squared_error: 0.0079 - val_mean_absolute_error: 0.0716\n",
            "Epoch 7/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0077 - mean_squared_error: 0.0077 - mean_absolute_error: 0.0695 - val_loss: 0.0160 - val_mean_squared_error: 0.0160 - val_mean_absolute_error: 0.1017\n",
            "Epoch 8/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0066 - mean_squared_error: 0.0066 - mean_absolute_error: 0.0643 - val_loss: 0.0113 - val_mean_squared_error: 0.0113 - val_mean_absolute_error: 0.0851\n",
            "Epoch 9/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0056 - mean_squared_error: 0.0056 - mean_absolute_error: 0.0600 - val_loss: 0.0060 - val_mean_squared_error: 0.0060 - val_mean_absolute_error: 0.0608\n",
            "Epoch 10/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0049 - mean_squared_error: 0.0049 - mean_absolute_error: 0.0562 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0670\n",
            "Epoch 11/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0063 - mean_squared_error: 0.0063 - mean_absolute_error: 0.0640 - val_loss: 0.0050 - val_mean_squared_error: 0.0050 - val_mean_absolute_error: 0.0546\n",
            "Epoch 12/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0494 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0527\n",
            "Epoch 13/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0513 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0525\n",
            "Epoch 14/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0536 - val_loss: 0.0043 - val_mean_squared_error: 0.0043 - val_mean_absolute_error: 0.0509\n",
            "Epoch 15/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0497 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0532\n",
            "Epoch 16/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - mean_absolute_error: 0.0425 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0484\n",
            "Epoch 17/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0497 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0473\n",
            "Epoch 18/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0467 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0463\n",
            "Epoch 19/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0437 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0492\n",
            "Epoch 20/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0472 - val_loss: 0.0035 - val_mean_squared_error: 0.0035 - val_mean_absolute_error: 0.0468\n",
            "Epoch 21/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0446 - val_loss: 0.0033 - val_mean_squared_error: 0.0033 - val_mean_absolute_error: 0.0454\n",
            "Epoch 22/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0030 - mean_squared_error: 0.0030 - mean_absolute_error: 0.0438 - val_loss: 0.0056 - val_mean_squared_error: 0.0056 - val_mean_absolute_error: 0.0619\n",
            "Epoch 23/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0036 - mean_squared_error: 0.0036 - mean_absolute_error: 0.0463 - val_loss: 0.0030 - val_mean_squared_error: 0.0030 - val_mean_absolute_error: 0.0432\n",
            "Epoch 24/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0410 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0499\n",
            "Epoch 25/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0442 - val_loss: 0.0030 - val_mean_squared_error: 0.0030 - val_mean_absolute_error: 0.0427\n",
            "Epoch 26/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0409 - val_loss: 0.0027 - val_mean_squared_error: 0.0027 - val_mean_absolute_error: 0.0412\n",
            "Epoch 27/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0378 - val_loss: 0.0030 - val_mean_squared_error: 0.0030 - val_mean_absolute_error: 0.0423\n",
            "Epoch 28/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0437 - val_loss: 0.0026 - val_mean_squared_error: 0.0026 - val_mean_absolute_error: 0.0406\n",
            "Epoch 29/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0400 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0381\n",
            "Epoch 30/200\n",
            "32/32 [==============================] - 0s 16ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0401 - val_loss: 0.0033 - val_mean_squared_error: 0.0033 - val_mean_absolute_error: 0.0451\n",
            "Epoch 31/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0030 - mean_squared_error: 0.0030 - mean_absolute_error: 0.0420 - val_loss: 0.0035 - val_mean_squared_error: 0.0035 - val_mean_absolute_error: 0.0466\n",
            "Epoch 32/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0382 - val_loss: 0.0027 - val_mean_squared_error: 0.0027 - val_mean_absolute_error: 0.0411\n",
            "Epoch 33/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0415 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0497\n",
            "Epoch 34/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0362 - val_loss: 0.0027 - val_mean_squared_error: 0.0027 - val_mean_absolute_error: 0.0404\n",
            "Epoch 35/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0367 - val_loss: 0.0026 - val_mean_squared_error: 0.0026 - val_mean_absolute_error: 0.0399\n",
            "Epoch 36/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0377 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0368\n",
            "Epoch 37/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0356 - val_loss: 0.0035 - val_mean_squared_error: 0.0035 - val_mean_absolute_error: 0.0470\n",
            "Epoch 38/200\n",
            "32/32 [==============================] - 1s 18ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0386 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0377\n",
            "Epoch 39/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0386 - val_loss: 0.0025 - val_mean_squared_error: 0.0025 - val_mean_absolute_error: 0.0392\n",
            "Epoch 40/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0387 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0463\n",
            "Epoch 41/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0355 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0382\n",
            "Epoch 42/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0365 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0487\n",
            "Epoch 43/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0414 - val_loss: 0.0022 - val_mean_squared_error: 0.0022 - val_mean_absolute_error: 0.0367\n",
            "Epoch 44/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0364 - val_loss: 0.0020 - val_mean_squared_error: 0.0020 - val_mean_absolute_error: 0.0354\n",
            "Epoch 45/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0373 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0357\n",
            "Epoch 46/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0348 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0361\n",
            "Epoch 47/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0353 - val_loss: 0.0020 - val_mean_squared_error: 0.0020 - val_mean_absolute_error: 0.0347\n",
            "Epoch 48/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0332 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0360\n",
            "Epoch 49/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0351 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0463\n",
            "Epoch 50/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0328 - val_loss: 0.0022 - val_mean_squared_error: 0.0022 - val_mean_absolute_error: 0.0369\n",
            "Epoch 51/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0329 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0462\n",
            "Epoch 52/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0345 - val_loss: 0.0024 - val_mean_squared_error: 0.0024 - val_mean_absolute_error: 0.0385\n",
            "Epoch 53/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0352 - val_loss: 0.0019 - val_mean_squared_error: 0.0019 - val_mean_absolute_error: 0.0342\n",
            "Epoch 54/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0349 - val_loss: 0.0026 - val_mean_squared_error: 0.0026 - val_mean_absolute_error: 0.0399\n",
            "Epoch 55/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0353 - val_loss: 0.0027 - val_mean_squared_error: 0.0027 - val_mean_absolute_error: 0.0410\n",
            "Epoch 56/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0323 - val_loss: 0.0020 - val_mean_squared_error: 0.0020 - val_mean_absolute_error: 0.0347\n",
            "Epoch 57/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0343 - val_loss: 0.0027 - val_mean_squared_error: 0.0027 - val_mean_absolute_error: 0.0409\n",
            "Epoch 58/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0320 - val_loss: 0.0024 - val_mean_squared_error: 0.0024 - val_mean_absolute_error: 0.0380\n",
            "Epoch 59/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0323 - val_loss: 0.0025 - val_mean_squared_error: 0.0025 - val_mean_absolute_error: 0.0391\n",
            "Epoch 60/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0311 - val_loss: 0.0026 - val_mean_squared_error: 0.0026 - val_mean_absolute_error: 0.0399\n",
            "Epoch 61/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0316 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0353\n",
            "Epoch 62/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0335 - val_loss: 0.0019 - val_mean_squared_error: 0.0019 - val_mean_absolute_error: 0.0343\n",
            "Epoch 63/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0317 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0382\n",
            "Epoch 64/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0317 - val_loss: 0.0022 - val_mean_squared_error: 0.0022 - val_mean_absolute_error: 0.0369\n",
            "Epoch 65/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0358 - val_loss: 0.0019 - val_mean_squared_error: 0.0019 - val_mean_absolute_error: 0.0342\n",
            "Epoch 66/200\n",
            "32/32 [==============================] - 1s 16ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0364 - val_loss: 0.0020 - val_mean_squared_error: 0.0020 - val_mean_absolute_error: 0.0346\n",
            "Epoch 67/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0301 - val_loss: 0.0019 - val_mean_squared_error: 0.0019 - val_mean_absolute_error: 0.0345\n",
            "Epoch 68/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0325 - val_loss: 0.0021 - val_mean_squared_error: 0.0021 - val_mean_absolute_error: 0.0357\n",
            "Epoch 69/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0314 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0374\n",
            "Epoch 70/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0309 - val_loss: 0.0024 - val_mean_squared_error: 0.0024 - val_mean_absolute_error: 0.0387\n",
            "Epoch 71/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0336 - val_loss: 0.0022 - val_mean_squared_error: 0.0022 - val_mean_absolute_error: 0.0371\n",
            "Epoch 72/200\n",
            "32/32 [==============================] - 1s 17ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0334 - val_loss: 0.0023 - val_mean_squared_error: 0.0023 - val_mean_absolute_error: 0.0384\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 8226<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "daa5528c59bc4f4598b6ba259357dda2",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 3.05MB of 3.05MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133153-gm91oqsx/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133153-gm91oqsx/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>71</td></tr><tr><td>loss</td><td>0.00193</td></tr><tr><td>mean_squared_error</td><td>0.00193</td></tr><tr><td>mean_absolute_error</td><td>0.03356</td></tr><tr><td>val_loss</td><td>0.00234</td></tr><tr><td>val_mean_squared_error</td><td>0.00234</td></tr><tr><td>val_mean_absolute_error</td><td>0.03842</td></tr><tr><td>_runtime</td><td>52</td></tr><tr><td>_timestamp</td><td>1626269565</td></tr><tr><td>_step</td><td>71</td></tr><tr><td>best_val_loss</td><td>0.00192</td></tr><tr><td>best_epoch</td><td>61</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▄▃▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>██▅▃▄▃▂▂▂▂▂▁▂▂▁▁▁▂▂▁▂▁▁▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>██▅▃▄▃▂▂▂▂▂▁▂▂▁▁▁▂▂▁▂▁▁▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>██▆▄▅▄▃▂▃▂▂▂▃▂▂▂▂▂▂▁▂▁▁▂▁▁▁▁▂▁▂▂▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>_timestamp</td><td>▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">lemon-sweep-29</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/gm91oqsx\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/gm91oqsx</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: 1r0w5sb5 with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 64\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.4\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: nadam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.10.33<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">revived-sweep-30</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/sweeps/9z361bjv</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/1r0w5sb5\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/1r0w5sb5</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210714_133255-1r0w5sb5</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "16/16 [==============================] - 8s 111ms/step - loss: 0.1862 - mean_squared_error: 0.1862 - mean_absolute_error: 0.3159 - val_loss: 0.2257 - val_mean_squared_error: 0.2257 - val_mean_absolute_error: 0.4561\n",
            "Epoch 2/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0472 - mean_squared_error: 0.0472 - mean_absolute_error: 0.1717 - val_loss: 0.0504 - val_mean_squared_error: 0.0504 - val_mean_absolute_error: 0.1925\n",
            "Epoch 3/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0167 - mean_squared_error: 0.0167 - mean_absolute_error: 0.1045 - val_loss: 0.0335 - val_mean_squared_error: 0.0335 - val_mean_absolute_error: 0.1508\n",
            "Epoch 4/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0147 - mean_squared_error: 0.0147 - mean_absolute_error: 0.0969 - val_loss: 0.0149 - val_mean_squared_error: 0.0149 - val_mean_absolute_error: 0.1025\n",
            "Epoch 5/50\n",
            "16/16 [==============================] - 0s 19ms/step - loss: 0.0147 - mean_squared_error: 0.0147 - mean_absolute_error: 0.0949 - val_loss: 0.0143 - val_mean_squared_error: 0.0143 - val_mean_absolute_error: 0.1010\n",
            "Epoch 6/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0137 - mean_squared_error: 0.0137 - mean_absolute_error: 0.0917 - val_loss: 0.0160 - val_mean_squared_error: 0.0160 - val_mean_absolute_error: 0.1013\n",
            "Epoch 7/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0123 - mean_squared_error: 0.0123 - mean_absolute_error: 0.0886 - val_loss: 0.0147 - val_mean_squared_error: 0.0147 - val_mean_absolute_error: 0.0973\n",
            "Epoch 8/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0094 - mean_squared_error: 0.0094 - mean_absolute_error: 0.0776 - val_loss: 0.0167 - val_mean_squared_error: 0.0167 - val_mean_absolute_error: 0.1037\n",
            "Epoch 9/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0104 - mean_squared_error: 0.0104 - mean_absolute_error: 0.0822 - val_loss: 0.0111 - val_mean_squared_error: 0.0111 - val_mean_absolute_error: 0.0864\n",
            "Epoch 10/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0097 - mean_squared_error: 0.0097 - mean_absolute_error: 0.0789 - val_loss: 0.0115 - val_mean_squared_error: 0.0115 - val_mean_absolute_error: 0.0894\n",
            "Epoch 11/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0084 - mean_squared_error: 0.0084 - mean_absolute_error: 0.0727 - val_loss: 0.0098 - val_mean_squared_error: 0.0098 - val_mean_absolute_error: 0.0809\n",
            "Epoch 12/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0093 - mean_squared_error: 0.0093 - mean_absolute_error: 0.0761 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0793\n",
            "Epoch 13/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0067 - mean_squared_error: 0.0067 - mean_absolute_error: 0.0644 - val_loss: 0.0114 - val_mean_squared_error: 0.0114 - val_mean_absolute_error: 0.0854\n",
            "Epoch 14/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0075 - mean_squared_error: 0.0075 - mean_absolute_error: 0.0696 - val_loss: 0.0089 - val_mean_squared_error: 0.0089 - val_mean_absolute_error: 0.0770\n",
            "Epoch 15/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0104 - mean_squared_error: 0.0104 - mean_absolute_error: 0.0820 - val_loss: 0.0083 - val_mean_squared_error: 0.0083 - val_mean_absolute_error: 0.0738\n",
            "Epoch 16/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0065 - mean_squared_error: 0.0065 - mean_absolute_error: 0.0636 - val_loss: 0.0078 - val_mean_squared_error: 0.0078 - val_mean_absolute_error: 0.0713\n",
            "Epoch 17/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0059 - mean_squared_error: 0.0059 - mean_absolute_error: 0.0608 - val_loss: 0.0074 - val_mean_squared_error: 0.0074 - val_mean_absolute_error: 0.0688\n",
            "Epoch 18/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0070 - mean_squared_error: 0.0070 - mean_absolute_error: 0.0661 - val_loss: 0.0081 - val_mean_squared_error: 0.0081 - val_mean_absolute_error: 0.0719\n",
            "Epoch 19/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0064 - mean_squared_error: 0.0064 - mean_absolute_error: 0.0638 - val_loss: 0.0107 - val_mean_squared_error: 0.0107 - val_mean_absolute_error: 0.0826\n",
            "Epoch 20/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0060 - mean_squared_error: 0.0060 - mean_absolute_error: 0.0601 - val_loss: 0.0145 - val_mean_squared_error: 0.0145 - val_mean_absolute_error: 0.0999\n",
            "Epoch 21/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0067 - mean_squared_error: 0.0067 - mean_absolute_error: 0.0648 - val_loss: 0.0129 - val_mean_squared_error: 0.0129 - val_mean_absolute_error: 0.0929\n",
            "Epoch 22/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0059 - mean_squared_error: 0.0059 - mean_absolute_error: 0.0607 - val_loss: 0.0069 - val_mean_squared_error: 0.0069 - val_mean_absolute_error: 0.0655\n",
            "Epoch 23/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0538 - val_loss: 0.0065 - val_mean_squared_error: 0.0065 - val_mean_absolute_error: 0.0638\n",
            "Epoch 24/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0052 - mean_squared_error: 0.0052 - mean_absolute_error: 0.0552 - val_loss: 0.0082 - val_mean_squared_error: 0.0082 - val_mean_absolute_error: 0.0716\n",
            "Epoch 25/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0553 - val_loss: 0.0060 - val_mean_squared_error: 0.0060 - val_mean_absolute_error: 0.0608\n",
            "Epoch 26/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0523 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0809\n",
            "Epoch 27/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0045 - mean_squared_error: 0.0045 - mean_absolute_error: 0.0539 - val_loss: 0.0054 - val_mean_squared_error: 0.0054 - val_mean_absolute_error: 0.0570\n",
            "Epoch 28/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0543 - val_loss: 0.0092 - val_mean_squared_error: 0.0092 - val_mean_absolute_error: 0.0775\n",
            "Epoch 29/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0046 - mean_squared_error: 0.0046 - mean_absolute_error: 0.0544 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0819\n",
            "Epoch 30/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0532 - val_loss: 0.0064 - val_mean_squared_error: 0.0064 - val_mean_absolute_error: 0.0626\n",
            "Epoch 31/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0046 - mean_squared_error: 0.0046 - mean_absolute_error: 0.0546 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0541\n",
            "Epoch 32/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0488 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0543\n",
            "Epoch 33/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0552 - val_loss: 0.0131 - val_mean_squared_error: 0.0131 - val_mean_absolute_error: 0.0969\n",
            "Epoch 34/50\n",
            "16/16 [==============================] - 0s 16ms/step - loss: 0.0046 - mean_squared_error: 0.0046 - mean_absolute_error: 0.0548 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0522\n",
            "Epoch 35/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0037 - mean_squared_error: 0.0037 - mean_absolute_error: 0.0491 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0523\n",
            "Epoch 36/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0474 - val_loss: 0.0044 - val_mean_squared_error: 0.0044 - val_mean_absolute_error: 0.0523\n",
            "Epoch 37/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0491 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0499\n",
            "Epoch 38/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0040 - mean_squared_error: 0.0040 - mean_absolute_error: 0.0503 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0490\n",
            "Epoch 39/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0438 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0500\n",
            "Epoch 40/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0429 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0478\n",
            "Epoch 41/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0469 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0529\n",
            "Epoch 42/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0460 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0517\n",
            "Epoch 43/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0451 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0536\n",
            "Epoch 44/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0028 - mean_squared_error: 0.0028 - mean_absolute_error: 0.0422 - val_loss: 0.0033 - val_mean_squared_error: 0.0033 - val_mean_absolute_error: 0.0452\n",
            "Epoch 45/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0442 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0466\n",
            "Epoch 46/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - mean_absolute_error: 0.0424 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0494\n",
            "Epoch 47/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0033 - mean_squared_error: 0.0033 - mean_absolute_error: 0.0450 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0457\n",
            "Epoch 48/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0408 - val_loss: 0.0031 - val_mean_squared_error: 0.0031 - val_mean_absolute_error: 0.0447\n",
            "Epoch 49/50\n",
            "16/16 [==============================] - 0s 18ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0406 - val_loss: 0.0034 - val_mean_squared_error: 0.0034 - val_mean_absolute_error: 0.0458\n",
            "Epoch 50/50\n",
            "16/16 [==============================] - 0s 17ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0453 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0493\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 8497<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "3e79d4f7b30d4de58a9e12f85c731e74",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 1.24MB of 1.24MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133255-1r0w5sb5/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210714_133255-1r0w5sb5/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>49</td></tr><tr><td>loss</td><td>0.00354</td></tr><tr><td>mean_squared_error</td><td>0.00354</td></tr><tr><td>mean_absolute_error</td><td>0.04693</td></tr><tr><td>val_loss</td><td>0.00377</td></tr><tr><td>val_mean_squared_error</td><td>0.00377</td></tr><tr><td>val_mean_absolute_error</td><td>0.04929</td></tr><tr><td>_runtime</td><td>28</td></tr><tr><td>_timestamp</td><td>1626269603</td></tr><tr><td>_step</td><td>49</td></tr><tr><td>best_val_loss</td><td>0.00312</td></tr><tr><td>best_epoch</td><td>47</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▃▂▂▂▂▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▃▂▂▂▂▁▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▅▄▃▃▃▂▃▂▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>█▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>█▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>█▄▃▂▂▂▂▂▂▂▂▂▁▁▁▂▂▁▁▁▂▁▂▂▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▁▁▁▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇█████</td></tr><tr><td>_timestamp</td><td>▁▁▁▁▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇█████</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">revived-sweep-30</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/1r0w5sb5\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_LSTM/runs/1r0w5sb5</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: dscb3tpn with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: tanh\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 64\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tdropout: 0.4\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \thidden_size: 25\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tinput_size: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.0005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: nadam\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Ctrl + C detected. Stopping sweep.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFTu29dbi18i"
      },
      "source": [
        "# Setting up the best model\n",
        "Using the best values from the hyperparamter search with wandb, the most optimal model configuration is used."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwsO8cDJPMdj"
      },
      "source": [
        "# picking the best values\n",
        "best_config = {\n",
        "    'epochs': 200,\n",
        "    'batch_size': 32,\n",
        "    'dropout': 0.2,\n",
        "    'input_size': 25,\n",
        "    'hidden_size': 25,\n",
        "    'learning_rate': 0.001,\n",
        "    'optimizer': 'nadam',\n",
        "    'activation': 'tanh'\n",
        "}"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OU7NXYBg1T4r",
        "outputId": "d45576e2-c36c-4fb4-f909-8182e8d43a9a"
      },
      "source": [
        "# clearing the settings on the keras backend\n",
        "keras.backend.clear_session()\n",
        "\n",
        "# setting keras model to sequential mode\n",
        "model = Sequential()\n",
        "\n",
        "# input layer\n",
        "model.add(LSTM(units=best_config['input_size'], return_sequences=True, input_shape=(window_len, 1), activation=best_config['activation']))\n",
        "model.add(Dropout(best_config['dropout']))\n",
        "# second model layer with dropout\n",
        "model.add(LSTM(units=best_config['hidden_size'], return_sequences=True, activation=best_config['activation']))\n",
        "model.add(Dropout(best_config['dropout']))\n",
        "# third model layer with dropout\n",
        "model.add(LSTM(units=best_config['hidden_size'], return_sequences=True, activation=best_config['activation']))\n",
        "model.add(Dropout(best_config['dropout']))\n",
        "# fourth model layer with dropout\n",
        "model.add(LSTM(units=best_config['hidden_size'], activation=best_config['activation']))\n",
        "model.add(Dropout(best_config['dropout']))\n",
        "# final layer with one output\n",
        "model.add(Dense(units=1))\n",
        "\n",
        "# defining the optimiser\n",
        "if best_config['optimizer'] == 'sgd':\n",
        "  optimizer = SGD(learning_rate=best_config['learning_rate'], decay=1e-5, momentum=0.9, nesterov=True)\n",
        "elif best_config['optimizer'] == 'rmsprop':\n",
        "  optimizer = RMSprop(learning_rate=best_config['learning_rate'], decay=1e-5)\n",
        "elif best_config['optimizer'] == 'adam':\n",
        "  optimizer = Adam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "elif best_config['optimizer'] == 'nadam':\n",
        "  optimizer = Nadam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "# compile the model\n",
        "model.compile(optimizer, loss='mean_squared_error')\n",
        "\n",
        "# counting the number of trainable parameters\n",
        "trainable_count = count_params(model.trainable_weights)\n",
        "print('Total number of trainable parameters: ', trainable_count)"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total number of trainable parameters:  18026\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3v718GcE39o",
        "outputId": "2fe28d38-969f-435e-b3e8-84137709610f"
      },
      "source": [
        "# fitting the model to the training dataset\n",
        "model.fit(X_train, y_train, epochs=best_config['epochs'], batch_size=best_config['batch_size'])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/200\n",
            "40/40 [==============================] - 7s 14ms/step - loss: 0.1263\n",
            "Epoch 2/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0148\n",
            "Epoch 3/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0111\n",
            "Epoch 4/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0104\n",
            "Epoch 5/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0105\n",
            "Epoch 6/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0103\n",
            "Epoch 7/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0090\n",
            "Epoch 8/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0083\n",
            "Epoch 9/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0093\n",
            "Epoch 10/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0087\n",
            "Epoch 11/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0076\n",
            "Epoch 12/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0071\n",
            "Epoch 13/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0079\n",
            "Epoch 14/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0077\n",
            "Epoch 15/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0071\n",
            "Epoch 16/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0072\n",
            "Epoch 17/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0065\n",
            "Epoch 18/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0070\n",
            "Epoch 19/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0064\n",
            "Epoch 20/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0063\n",
            "Epoch 21/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0057\n",
            "Epoch 22/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0064\n",
            "Epoch 23/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0063\n",
            "Epoch 24/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0056\n",
            "Epoch 25/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0048\n",
            "Epoch 26/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0054\n",
            "Epoch 27/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0049\n",
            "Epoch 28/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0056\n",
            "Epoch 29/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0052\n",
            "Epoch 30/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0046\n",
            "Epoch 31/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0050\n",
            "Epoch 32/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0052\n",
            "Epoch 33/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0048\n",
            "Epoch 34/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0054\n",
            "Epoch 35/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0040\n",
            "Epoch 36/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0040\n",
            "Epoch 37/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0043\n",
            "Epoch 38/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0040\n",
            "Epoch 39/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0040\n",
            "Epoch 40/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0045\n",
            "Epoch 41/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0044\n",
            "Epoch 42/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0040\n",
            "Epoch 43/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0038\n",
            "Epoch 44/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0040\n",
            "Epoch 45/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0037\n",
            "Epoch 46/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0037\n",
            "Epoch 47/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0036\n",
            "Epoch 48/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0035\n",
            "Epoch 49/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0035\n",
            "Epoch 50/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0037\n",
            "Epoch 51/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0035\n",
            "Epoch 52/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0034\n",
            "Epoch 53/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0032\n",
            "Epoch 54/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0031\n",
            "Epoch 55/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0033\n",
            "Epoch 56/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0032\n",
            "Epoch 57/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0032\n",
            "Epoch 58/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0031\n",
            "Epoch 59/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0026\n",
            "Epoch 60/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0029\n",
            "Epoch 61/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0028\n",
            "Epoch 62/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0026\n",
            "Epoch 63/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0026\n",
            "Epoch 64/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0028\n",
            "Epoch 65/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0026\n",
            "Epoch 66/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0026\n",
            "Epoch 67/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0025\n",
            "Epoch 68/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 69/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 70/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 71/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0021\n",
            "Epoch 72/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0025\n",
            "Epoch 73/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 74/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 75/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0023\n",
            "Epoch 76/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0024\n",
            "Epoch 77/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0024\n",
            "Epoch 78/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0023\n",
            "Epoch 79/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0025\n",
            "Epoch 80/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0020\n",
            "Epoch 81/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0022\n",
            "Epoch 82/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0022\n",
            "Epoch 83/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0020\n",
            "Epoch 84/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0020\n",
            "Epoch 85/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0021\n",
            "Epoch 86/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0019\n",
            "Epoch 87/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0019\n",
            "Epoch 88/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0021\n",
            "Epoch 89/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0021\n",
            "Epoch 90/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0019\n",
            "Epoch 91/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0019\n",
            "Epoch 92/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 93/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0018\n",
            "Epoch 94/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0019\n",
            "Epoch 95/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0018\n",
            "Epoch 96/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 97/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 98/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0017\n",
            "Epoch 99/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 100/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 101/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0017\n",
            "Epoch 102/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0016\n",
            "Epoch 103/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0017\n",
            "Epoch 104/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 105/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 106/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0018\n",
            "Epoch 107/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0017\n",
            "Epoch 108/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0016\n",
            "Epoch 109/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0017\n",
            "Epoch 110/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 111/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 112/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 113/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 114/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 115/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 116/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 117/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0016\n",
            "Epoch 118/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 119/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 120/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0017\n",
            "Epoch 121/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 122/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 123/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 124/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 125/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 126/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 127/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 128/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 129/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 130/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 131/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 132/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 133/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 134/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0016\n",
            "Epoch 135/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 136/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 137/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 138/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 139/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 140/200\n",
            "40/40 [==============================] - 1s 15ms/step - loss: 0.0014\n",
            "Epoch 141/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 142/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 143/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 144/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 145/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 146/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 147/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 148/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 149/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 150/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0016\n",
            "Epoch 151/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 152/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 153/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 154/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 155/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 156/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 157/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 158/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 159/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 160/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 161/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 162/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 163/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 164/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 165/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 166/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0015\n",
            "Epoch 167/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 168/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0012\n",
            "Epoch 169/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 170/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0016\n",
            "Epoch 171/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 172/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 173/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 174/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0012\n",
            "Epoch 175/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 176/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 177/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 178/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 179/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0015\n",
            "Epoch 180/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 181/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0012\n",
            "Epoch 182/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 183/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 184/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0010\n",
            "Epoch 185/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 186/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0012\n",
            "Epoch 187/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0011\n",
            "Epoch 188/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0012\n",
            "Epoch 189/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 190/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 191/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0013\n",
            "Epoch 192/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0014\n",
            "Epoch 193/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 194/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0013\n",
            "Epoch 195/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0012\n",
            "Epoch 196/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0011\n",
            "Epoch 197/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0012\n",
            "Epoch 198/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 199/200\n",
            "40/40 [==============================] - 1s 13ms/step - loss: 0.0014\n",
            "Epoch 200/200\n",
            "40/40 [==============================] - 1s 14ms/step - loss: 0.0012\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fd2085d80d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rTXJN51l9Y-F"
      },
      "source": [
        "# creating an instance of Baseline_Model class using X_test\n",
        "base_model = Base_Model(X_test, window_len)\n",
        "# calling predict_y method\n",
        "base_model.predict_y(in_data.test_len - window_len)\n",
        "\n",
        "# using the model to predict y from X_test\n",
        "y_pred = model.predict(X_test)\n",
        "# assigning y_dummy variable to .y_pred class attribute\n",
        "y_dummy = base_model.y_pred\n",
        "\n",
        "# calling class method extract_real_price to generate unnormalised prices\n",
        "in_data.extract_real_prices(y_pred, y_dummy)\n",
        "\n",
        "# assinging y_true variable\n",
        "y_true = in_data.y_true\n",
        "\n",
        "# assigning actual_price, predicted_price and dummy_price\n",
        "actual_price = in_data.actual_price\n",
        "predicted_price = in_data.predicted_price\n",
        "dummy_price = in_data.dummy_price"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-D-XHyRjFMp"
      },
      "source": [
        "# Plotting the prediction results and getting errors\n",
        "The cells below plot the actual, predicted and dummy prices using the Security_Plotter class before finally saving the model and plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "PgjvooOD3jq3",
        "outputId": "746c096c-da24-4f22-85f4-d85a38def0c1"
      },
      "source": [
        "plotter = Security_Plotter(in_data, actual_price, predicted_price,\n",
        "                            dummy_price, in_data.train_len, window_len, in_str)\n",
        "\n",
        "plotter.single_plot()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AxaH7IUCxSXw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "d47db2ae-1de0-43e8-97b7-bf562a959532"
      },
      "source": [
        "plot_model(model, show_shapes=True, expand_nested=True)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFfQGfb79SJS",
        "outputId": "c98a9258-27b1-4a94-e129-17ceaa1bdc1f"
      },
      "source": [
        "# calculating mean squared error\n",
        "mse = mean_squared_error(y_true, y_pred)\n",
        "\n",
        "# calculating root mean squared error\n",
        "rmse = mean_squared_error(y_true, y_pred, squared=False)\n",
        "\n",
        "# calculating mean absolute error\n",
        "mae = mean_absolute_error(y_true, y_pred)\n",
        "\n",
        "print('MSE: ', mse)\n",
        "print('RMSE: ', rmse)\n",
        "print('MAE: ', mae)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE:  0.0012359831184017914\n",
            "RMSE:  0.03515655157153203\n",
            "MAE:  0.026873720642233312\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4YttzJHHU4-s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5c212af5-5800-47e4-a2ea-80f7ec30bfb7"
      },
      "source": [
        "# creating a string to save the model based on model name\n",
        "save_path = '/content/gdrive/My Drive/models/'+model_str+'_'+in_str+'/'\n",
        "# mounting google drive for easy storage of model\n",
        "from google.colab import drive\n",
        "# mounting the drive\n",
        "drive.mount('/content/gdrive/')\n",
        "# making the relevant directory to store the model\n",
        "os.mkdir(save_path)\n",
        "# saving the model\n",
        "keras.models.save_model(model, save_path)\n",
        "# saving the model graph\n",
        "model_graph = plot_model(model, to_file=save_path+model_str+'_'+in_str+'_graph_.png', show_shapes=True, expand_nested=True)\n",
        "# saving the matplotlib plot\n",
        "plotter.fig.savefig(save_path+model_str+'_'+in_str+'_plot.png', bbox_inches='tight')\n",
        "# saving the error metrics as a text file\n",
        "error_file = open(save_path+model_str+'_'+in_str+'_metrics.txt', 'w+')\n",
        "error_file.write('MSE:'+str(mse)+'\\n'+'RMSE: '+str(rmse)+'\\n'+'MAE: '+str(mae)+'\\n')\n",
        "error_file.close()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive/\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as lstm_cell_layer_call_fn, lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_2_layer_call_fn while saving (showing 5 of 20). These functions will not be directly callable after loading.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /content/gdrive/My Drive/models/LSTM_Treasury10y/assets\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /content/gdrive/My Drive/models/LSTM_Treasury10y/assets\n"
          ],
          "name": "stderr"
        }
      ]
    }
  ]
}