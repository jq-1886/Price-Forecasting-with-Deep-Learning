{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CNN_LSTM_Treasury10y.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyO5eajBMdEYybF8XDCFQvol",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "028a37b6ca004957a9d62463ad78b21c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "state": {
            "_view_name": "VBoxView",
            "_dom_classes": [],
            "_model_name": "VBoxModel",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "box_style": "",
            "layout": "IPY_MODEL_cb1ee882ccce4f3da462c4a8b870844c",
            "_model_module": "@jupyter-widgets/controls",
            "children": [
              "IPY_MODEL_b7d4c013f2fc44e4a3260b41114695cb",
              "IPY_MODEL_653fd87e3a2a48c29851a91f9e7f039a"
            ]
          }
        },
        "cb1ee882ccce4f3da462c4a8b870844c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b7d4c013f2fc44e4a3260b41114695cb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "state": {
            "_view_name": "LabelView",
            "style": "IPY_MODEL_b81a912b0eee4bc984162ab13ac67f6b",
            "_dom_classes": [],
            "description": "",
            "_model_name": "LabelModel",
            "placeholder": "​",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": " 11.56MB of 11.56MB uploaded (0.00MB deduped)\r",
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_54528442cf9e4e888882f6c473931ae6"
          }
        },
        "653fd87e3a2a48c29851a91f9e7f039a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_b128790d07994c8491c0f4f5e35cfbb4",
            "_dom_classes": [],
            "description": "",
            "_model_name": "FloatProgressModel",
            "bar_style": "",
            "max": 1,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 1,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_465220a88e2345ed901a632ffb950508"
          }
        },
        "b81a912b0eee4bc984162ab13ac67f6b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "54528442cf9e4e888882f6c473931ae6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "b128790d07994c8491c0f4f5e35cfbb4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "465220a88e2345ed901a632ffb950508": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/acse-2020/acse2020-acse9-finalreport-acse-jaq15/blob/main/notebooks/CNN_LSTM/CNN_LSTM_Treasury10y.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z5F7GfFTgUo3"
      },
      "source": [
        "# Imports\n",
        "\n",
        "The cells below handle all the necessary imports to run our models, making use of the public repo feeder_repo, linked <!-- [Text](link) -->\n",
        "[here](https://github.com/acse-jaq15/feeder_repo)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HWy9Ay1SGzWa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82738232-1b22-47f3-d06d-0c06dedb93ef"
      },
      "source": [
        "# clone the feeder repo to get data_reader module and financial time series data\n",
        "!git clone https://github.com/acse-jaq15/feeder_repo.git"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'feeder_repo'...\n",
            "remote: Enumerating objects: 150, done.\u001b[K\n",
            "remote: Counting objects: 100% (150/150), done.\u001b[K\n",
            "remote: Compressing objects: 100% (145/145), done.\u001b[K\n",
            "remote: Total 150 (delta 73), reused 6 (delta 2), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (150/150), 121.14 KiB | 6.06 MiB/s, done.\n",
            "Resolving deltas: 100% (73/73), done.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChlUNYaiHGM2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0966fdcd-04d3-4cc6-bb6b-1af4aa9d2363"
      },
      "source": [
        "# using '%' to enforce a permanent change of directory\n",
        "%cd feeder_repo/"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/feeder_repo\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "saD-jpvPIfZ8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b79cdc31-9d7a-46eb-fd0c-64d028ec19d1"
      },
      "source": [
        "# checking contents listed correctly, should read:\n",
        "# baseline_model.py data data_reader.py LICENSE README.md security_plotter.py\n",
        "!ls"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "base_model.py  data  data_reader.py  LICENSE  README.md  security_plotter.py\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fRqkwo6kZUz_"
      },
      "source": [
        "import math\n",
        "import sys\n",
        "import keras\n",
        "import os\n",
        "import matplotlib.dates as mdates\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import LSTM\n",
        "from keras.layers import GRU\n",
        "from keras.layers import Dropout\n",
        "from keras.layers import *\n",
        "from keras.utils.layer_utils import count_params\n",
        "from keras.utils.vis_utils import plot_model\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import mean_absolute_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "from keras.callbacks import EarlyStopping, Callback\n",
        "from keras.optimizers import RMSprop, SGD, Adam, Nadam\n",
        "from keras.initializers import random_normal"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hzVhwND1HAlw"
      },
      "source": [
        "# appending path with 'feeder_repo' string\n",
        "sys.path.append('feeder_repo')\n",
        "\n",
        "# import Data_Reader class from data_reader module\n",
        "from feeder_repo.data_reader import Data_Reader\n",
        "# import Baseline_Model class from base_model module\n",
        "from feeder_repo.base_model import Base_Model\n",
        "# import Security_Plotter class from security_plotter module\n",
        "from feeder_repo.security_plotter import Security_Plotter"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6-tNDlXuhiCU",
        "outputId": "7d623bce-cb55-424e-985f-5a60c2439065"
      },
      "source": [
        "# checking if the notebook is running on a GPU\n",
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "    print('Select the Runtime > \"Change runtime type\" menu to enable a GPU accelerator, ')\n",
        "    print('and then re-execute this cell.')\n",
        "else:\n",
        "    print(gpu_info)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Wed Jul 21 15:51:20 2021       \n",
            "+-----------------------------------------------------------------------------+\n",
            "| NVIDIA-SMI 470.42.01    Driver Version: 460.32.03    CUDA Version: 11.2     |\n",
            "|-------------------------------+----------------------+----------------------+\n",
            "| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n",
            "| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n",
            "|                               |                      |               MIG M. |\n",
            "|===============================+======================+======================|\n",
            "|   0  Tesla V100-SXM2...  Off  | 00000000:00:04.0 Off |                    0 |\n",
            "| N/A   34C    P0    25W / 300W |      0MiB / 16160MiB |      0%      Default |\n",
            "|                               |                      |                  N/A |\n",
            "+-------------------------------+----------------------+----------------------+\n",
            "                                                                               \n",
            "+-----------------------------------------------------------------------------+\n",
            "| Processes:                                                                  |\n",
            "|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n",
            "|        ID   ID                                                   Usage      |\n",
            "|=============================================================================|\n",
            "|  No running processes found                                                 |\n",
            "+-----------------------------------------------------------------------------+\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WB9wD4Aahs8_"
      },
      "source": [
        "# Handling the data\n",
        "Here the Data_Reader class is used to read the time series data and extract training, test and validation sets, along with the relevant X and y values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vBlKerL-c4-3"
      },
      "source": [
        "# storing the file to be read as a string\n",
        "in_str = 'Treasury10y'\n",
        "# storing the year of the time series to be used as test data\n",
        "in_yr = 2019\n",
        "# creating a variable to store the model name\n",
        "model_str = 'CNN_LSTM'\n",
        "# setting our window_length to be 30 days\n",
        "window_len = 30"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hfQJbuBk0vW0"
      },
      "source": [
        "# creating an instance of Data_Reader class\n",
        "in_data = Data_Reader(in_str, in_yr)\n",
        "# calling class method extract_train_test to generate training and test datasets\n",
        "in_data.extract_train_test()\n",
        "# calling class method extract_xy to generate X and y training and test datasets\n",
        "in_data.extract_xy(window_len, time_distributed=True)\n",
        "\n",
        "# assigning X_train and y_train\n",
        "X_train = in_data.X_train\n",
        "y_train = in_data.y_train\n",
        "\n",
        "# assigning X_test and y_test\n",
        "X_test = in_data.X_test\n",
        "y_test = in_data.y_test\n",
        "\n",
        "# assigning X_val_train and y_val_train\n",
        "X_val_train = in_data.X_val_train\n",
        "y_val_train = in_data.y_val_train\n",
        "\n",
        "# assigning X_val_test and y_val_test\n",
        "X_val_test = in_data.X_val_test\n",
        "y_val_test = in_data.y_val_test"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X53Fp1Gwh88_"
      },
      "source": [
        "# Setting up wandb itegration\n",
        "Here wandb is used to perform hyperparameter tuning."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aE6cdrSDiHhq",
        "outputId": "2d37b1ec-95a9-4066-be6b-5ba0a5ed16b1"
      },
      "source": [
        "# installing the wandb library and importing\n",
        "%pip install wandb -q\n",
        "import wandb\n",
        "from wandb.keras import WandbCallback"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[K     |████████████████████████████████| 1.8 MB 15.4 MB/s \n",
            "\u001b[K     |████████████████████████████████| 170 kB 63.3 MB/s \n",
            "\u001b[K     |████████████████████████████████| 97 kB 9.1 MB/s \n",
            "\u001b[K     |████████████████████████████████| 138 kB 48.9 MB/s \n",
            "\u001b[K     |████████████████████████████████| 133 kB 28.4 MB/s \n",
            "\u001b[K     |████████████████████████████████| 63 kB 2.0 MB/s \n",
            "\u001b[K     |████████████████████████████████| 62 kB 1.1 MB/s \n",
            "\u001b[?25h  Building wheel for subprocess32 (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Building wheel for pathtools (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.26.0 which is incompatible.\n",
            "datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.\u001b[0m\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pbgZaoQDiIKX"
      },
      "source": [
        "!pip install wandb -qq"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1WHkW0XyiKVL",
        "outputId": "bac170b3-64be-4f62-8779-63670e1dda89"
      },
      "source": [
        "# logging in so the hyperparameter tunings sweeps can be saved\n",
        "!wandb login"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter: \n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "j91IBGuSid5w"
      },
      "source": [
        "# configuring the sweep, making use of a random search methodology\n",
        "sweep_config = {\n",
        "    'method': 'random', #grid, random\n",
        "    'metric': {\n",
        "      'name': 'mse',\n",
        "      'goal': 'minimize'   \n",
        "    },\n",
        "    'parameters': {\n",
        "        'epochs': {\n",
        "            'values': [50, 100, 200]\n",
        "        },\n",
        "        'batch_size': {\n",
        "            'values': [128, 64, 32]\n",
        "        },\n",
        "        'learning_rate': {\n",
        "            'values': [0.005, 0.001, 0.0005]\n",
        "        },\n",
        "        'optimizer': {\n",
        "            'values': ['adam', 'nadam', 'rmsprop', 'sgd']\n",
        "        },\n",
        "        'activation': {\n",
        "            'values': ['relu', 'selu']\n",
        "        }\n",
        "    }\n",
        "}"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V0Sr9HsorH4E"
      },
      "source": [
        "# wandb calls this training function to run through the hyperparameter search\n",
        "def train():\n",
        "    # default values for searching\n",
        "    config_defaults = {\n",
        "        'epochs': 100,\n",
        "        'batch_size': 32,\n",
        "        'learning_rate': 0.005,\n",
        "        'optimizer': 'adam',\n",
        "        'activation': 'tanh',\n",
        "        'momentum': 0.9,\n",
        "        'seed': 42\n",
        "    }\n",
        "\n",
        "    # Initialize a new wandb run\n",
        "    wandb.init(config=config_defaults)\n",
        "    \n",
        "    # Config is a variable that holds and saves hyperparameters and inputs\n",
        "    config = wandb.config\n",
        "\n",
        "    # setting keras model to sequential mode\n",
        "    model = Sequential()\n",
        "\n",
        "    # layer 1\n",
        "    model.add(TimeDistributed(Conv1D(filters=128, kernel_size=2, activation=config.activation), input_shape=(None, window_len, 1)))\n",
        "    # layer 2\n",
        "    model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n",
        "    # layer 3\n",
        "    model.add(TimeDistributed(Flatten()))\n",
        "    # layer 4\n",
        "    model.add(LSTM(units=128, activation='tanh', return_sequences=False))\n",
        "    # layer 5\n",
        "    model.add(Dropout(0.1))\n",
        "    # layer 6\n",
        "    model.add(Dense(1))\n",
        "\n",
        "    # Define the optimizer\n",
        "    if config.optimizer=='sgd':\n",
        "      optimizer = SGD(learning_rate=config.learning_rate, decay=1e-5, momentum=config.momentum, nesterov=True)\n",
        "    elif config.optimizer=='rmsprop':\n",
        "      optimizer = RMSprop(learning_rate=config.learning_rate, decay=1e-5)\n",
        "    elif config.optimizer=='adam':\n",
        "      optimizer = Adam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "    elif config.optimizer=='nadam':\n",
        "      optimizer = Nadam(learning_rate=config.learning_rate, beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "    model.compile(loss = \"mean_squared_error\", optimizer=optimizer, metrics=['mean_squared_error', 'mean_absolute_error'])\n",
        "\n",
        "    model.fit(X_val_train, y_val_train, batch_size=config.batch_size,\n",
        "              epochs=config.epochs,\n",
        "              validation_data=(X_val_test, y_val_test),\n",
        "              callbacks=[WandbCallback(validation_data=(X_val_test, y_val_test)),\n",
        "                          EarlyStopping(patience=10, restore_best_weights=True)])"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JwZO6oAFU1LN",
        "outputId": "8774012f-8d1d-4c9c-fe78-ec43ed6f914b"
      },
      "source": [
        "# setting up our sweep_id\n",
        "sweep_id = wandb.sweep(sweep_config, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Create sweep with ID: 0ddink33\n",
            "Sweep URL: https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/sweeps/0ddink33\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZfSCGWfluFw0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000,
          "referenced_widgets": [
            "028a37b6ca004957a9d62463ad78b21c",
            "cb1ee882ccce4f3da462c4a8b870844c",
            "b7d4c013f2fc44e4a3260b41114695cb",
            "653fd87e3a2a48c29851a91f9e7f039a",
            "b81a912b0eee4bc984162ab13ac67f6b",
            "54528442cf9e4e888882f6c473931ae6",
            "b128790d07994c8491c0f4f5e35cfbb4",
            "465220a88e2345ed901a632ffb950508"
          ]
        },
        "outputId": "da0dfc59-6b53-4551-9820-6c5d0a21db71"
      },
      "source": [
        "# initialising a new sweep\n",
        "wandb.agent(sweep_id, train, project='ACSE_9_'+model_str)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: fczgxwkm with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: relu\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 64\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 50\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.001\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: adam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.11.0<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">driven-sweep-31</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/sweeps/0ddink33\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/sweeps/0ddink33</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/fczgxwkm\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/fczgxwkm</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210721_161301-fczgxwkm</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "16/16 [==============================] - 3s 59ms/step - loss: 0.0980 - mean_squared_error: 0.0980 - mean_absolute_error: 0.2470 - val_loss: 0.0507 - val_mean_squared_error: 0.0507 - val_mean_absolute_error: 0.1924\n",
            "Epoch 2/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0139 - mean_squared_error: 0.0139 - mean_absolute_error: 0.0948 - val_loss: 0.0160 - val_mean_squared_error: 0.0160 - val_mean_absolute_error: 0.1039\n",
            "Epoch 3/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0068 - mean_squared_error: 0.0068 - mean_absolute_error: 0.0652 - val_loss: 0.0144 - val_mean_squared_error: 0.0144 - val_mean_absolute_error: 0.1003\n",
            "Epoch 4/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0061 - mean_squared_error: 0.0061 - mean_absolute_error: 0.0606 - val_loss: 0.0123 - val_mean_squared_error: 0.0123 - val_mean_absolute_error: 0.0909\n",
            "Epoch 5/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0048 - mean_squared_error: 0.0048 - mean_absolute_error: 0.0548 - val_loss: 0.0114 - val_mean_squared_error: 0.0114 - val_mean_absolute_error: 0.0871\n",
            "Epoch 6/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0038 - mean_squared_error: 0.0038 - mean_absolute_error: 0.0485 - val_loss: 0.0101 - val_mean_squared_error: 0.0101 - val_mean_absolute_error: 0.0815\n",
            "Epoch 7/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0033 - mean_squared_error: 0.0033 - mean_absolute_error: 0.0456 - val_loss: 0.0094 - val_mean_squared_error: 0.0094 - val_mean_absolute_error: 0.0779\n",
            "Epoch 8/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0032 - mean_squared_error: 0.0032 - mean_absolute_error: 0.0453 - val_loss: 0.0089 - val_mean_squared_error: 0.0089 - val_mean_absolute_error: 0.0758\n",
            "Epoch 9/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0030 - mean_squared_error: 0.0030 - mean_absolute_error: 0.0437 - val_loss: 0.0084 - val_mean_squared_error: 0.0084 - val_mean_absolute_error: 0.0739\n",
            "Epoch 10/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0444 - val_loss: 0.0077 - val_mean_squared_error: 0.0077 - val_mean_absolute_error: 0.0706\n",
            "Epoch 11/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - mean_absolute_error: 0.0434 - val_loss: 0.0080 - val_mean_squared_error: 0.0080 - val_mean_absolute_error: 0.0722\n",
            "Epoch 12/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0026 - mean_squared_error: 0.0026 - mean_absolute_error: 0.0411 - val_loss: 0.0073 - val_mean_squared_error: 0.0073 - val_mean_absolute_error: 0.0686\n",
            "Epoch 13/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0393 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0677\n",
            "Epoch 14/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0026 - mean_squared_error: 0.0026 - mean_absolute_error: 0.0411 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0683\n",
            "Epoch 15/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0026 - mean_squared_error: 0.0026 - mean_absolute_error: 0.0406 - val_loss: 0.0067 - val_mean_squared_error: 0.0067 - val_mean_absolute_error: 0.0651\n",
            "Epoch 16/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0365 - val_loss: 0.0066 - val_mean_squared_error: 0.0066 - val_mean_absolute_error: 0.0650\n",
            "Epoch 17/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0396 - val_loss: 0.0067 - val_mean_squared_error: 0.0067 - val_mean_absolute_error: 0.0650\n",
            "Epoch 18/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0382 - val_loss: 0.0065 - val_mean_squared_error: 0.0065 - val_mean_absolute_error: 0.0640\n",
            "Epoch 19/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0366 - val_loss: 0.0063 - val_mean_squared_error: 0.0063 - val_mean_absolute_error: 0.0630\n",
            "Epoch 20/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0374 - val_loss: 0.0061 - val_mean_squared_error: 0.0061 - val_mean_absolute_error: 0.0620\n",
            "Epoch 21/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0362 - val_loss: 0.0063 - val_mean_squared_error: 0.0063 - val_mean_absolute_error: 0.0625\n",
            "Epoch 22/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0368 - val_loss: 0.0059 - val_mean_squared_error: 0.0059 - val_mean_absolute_error: 0.0611\n",
            "Epoch 23/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0334 - val_loss: 0.0058 - val_mean_squared_error: 0.0058 - val_mean_absolute_error: 0.0604\n",
            "Epoch 24/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0350 - val_loss: 0.0056 - val_mean_squared_error: 0.0056 - val_mean_absolute_error: 0.0594\n",
            "Epoch 25/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0365 - val_loss: 0.0056 - val_mean_squared_error: 0.0056 - val_mean_absolute_error: 0.0594\n",
            "Epoch 26/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0328 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0585\n",
            "Epoch 27/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0336 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0570\n",
            "Epoch 28/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0341 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0583\n",
            "Epoch 29/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0344 - val_loss: 0.0053 - val_mean_squared_error: 0.0053 - val_mean_absolute_error: 0.0576\n",
            "Epoch 30/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0337 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0572\n",
            "Epoch 31/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0332 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0580\n",
            "Epoch 32/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0347 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0572\n",
            "Epoch 33/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0357 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0569\n",
            "Epoch 34/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0327 - val_loss: 0.0054 - val_mean_squared_error: 0.0054 - val_mean_absolute_error: 0.0575\n",
            "Epoch 35/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0351 - val_loss: 0.0054 - val_mean_squared_error: 0.0054 - val_mean_absolute_error: 0.0574\n",
            "Epoch 36/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0336 - val_loss: 0.0050 - val_mean_squared_error: 0.0050 - val_mean_absolute_error: 0.0560\n",
            "Epoch 37/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0353 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0554\n",
            "Epoch 38/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0329 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0560\n",
            "Epoch 39/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0325 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0544\n",
            "Epoch 40/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0325 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0548\n",
            "Epoch 41/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0327 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0538\n",
            "Epoch 42/50\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0345 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0589\n",
            "Epoch 43/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0348 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0557\n",
            "Epoch 44/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0325 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0549\n",
            "Epoch 45/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0015 - mean_squared_error: 0.0015 - mean_absolute_error: 0.0300 - val_loss: 0.0054 - val_mean_squared_error: 0.0054 - val_mean_absolute_error: 0.0585\n",
            "Epoch 46/50\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0322 - val_loss: 0.0048 - val_mean_squared_error: 0.0048 - val_mean_absolute_error: 0.0551\n",
            "Epoch 47/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0333 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0539\n",
            "Epoch 48/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0333 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0544\n",
            "Epoch 49/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0015 - mean_squared_error: 0.0015 - mean_absolute_error: 0.0303 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0542\n",
            "Epoch 50/50\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0326 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0540\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<br/>Waiting for W&B process to finish, PID 8030<br/>Program ended successfully."
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "028a37b6ca004957a9d62463ad78b21c",
              "version_minor": 0,
              "version_major": 2
            },
            "text/plain": [
              "VBox(children=(Label(value=' 10.04MB of 10.04MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.…"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find user logs for this run at: <code>/content/feeder_repo/wandb/run-20210721_161301-fczgxwkm/logs/debug.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Find internal logs for this run at: <code>/content/feeder_repo/wandb/run-20210721_161301-fczgxwkm/logs/debug-internal.log</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run summary:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>49</td></tr><tr><td>loss</td><td>0.00175</td></tr><tr><td>mean_squared_error</td><td>0.00175</td></tr><tr><td>mean_absolute_error</td><td>0.03272</td></tr><tr><td>val_loss</td><td>0.00462</td></tr><tr><td>val_mean_squared_error</td><td>0.00462</td></tr><tr><td>val_mean_absolute_error</td><td>0.05398</td></tr><tr><td>_runtime</td><td>14</td></tr><tr><td>_timestamp</td><td>1626883995</td></tr><tr><td>_step</td><td>49</td></tr><tr><td>best_val_loss</td><td>0.00462</td></tr><tr><td>best_epoch</td><td>49</td></tr></table>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<h3>Run history:</h3><br/><style>\n",
              "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
              "    </style><table class=\"wandb\">\n",
              "<tr><td>epoch</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr><tr><td>loss</td><td>█▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_squared_error</td><td>█▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>mean_absolute_error</td><td>█▄▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_loss</td><td>█▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_squared_error</td><td>█▃▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>val_mean_absolute_error</td><td>█▄▃▃▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁</td></tr><tr><td>_runtime</td><td>▁▂▂▂▂▂▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇██████</td></tr><tr><td>_timestamp</td><td>▁▂▂▂▂▂▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▅▅▅▆▆▆▆▆▇▇▇▇▇██████</td></tr><tr><td>_step</td><td>▁▁▁▁▂▂▂▂▂▃▃▃▃▃▃▄▄▄▄▄▅▅▅▅▅▅▆▆▆▆▆▆▇▇▇▇▇███</td></tr></table><br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Synced 5 W&B file(s), 1 media file(s), 2 artifact file(s) and 2 other file(s)"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                    <br/>Synced <strong style=\"color:#cdcd00\">driven-sweep-31</strong>: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/fczgxwkm\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/fczgxwkm</a><br/>\n",
              "                "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Agent Starting Run: jytxpngk with config:\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tactivation: selu\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tbatch_size: 64\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tepochs: 100\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \tlearning_rate: 0.0005\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: \toptimizer: nadam\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "                Tracking run with wandb version 0.11.0<br/>\n",
              "                Syncing run <strong style=\"color:#cdcd00\">laced-sweep-32</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
              "                Project page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM</a><br/>\n",
              "                Sweep page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/sweeps/0ddink33\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/sweeps/0ddink33</a><br/>\n",
              "Run page: <a href=\"https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/jytxpngk\" target=\"_blank\">https://wandb.ai/acse-jaq15/ACSE_9_CNN_LSTM/runs/jytxpngk</a><br/>\n",
              "                Run data is saved locally in <code>/content/feeder_repo/wandb/run-20210721_161325-jytxpngk</code><br/><br/>\n",
              "            "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "16/16 [==============================] - 4s 65ms/step - loss: 0.0773 - mean_squared_error: 0.0773 - mean_absolute_error: 0.1890 - val_loss: 0.0159 - val_mean_squared_error: 0.0159 - val_mean_absolute_error: 0.1037\n",
            "Epoch 2/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0062 - mean_squared_error: 0.0062 - mean_absolute_error: 0.0609 - val_loss: 0.0136 - val_mean_squared_error: 0.0136 - val_mean_absolute_error: 0.0939\n",
            "Epoch 3/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0047 - mean_squared_error: 0.0047 - mean_absolute_error: 0.0533 - val_loss: 0.0103 - val_mean_squared_error: 0.0103 - val_mean_absolute_error: 0.0838\n",
            "Epoch 4/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0568 - val_loss: 0.0141 - val_mean_squared_error: 0.0141 - val_mean_absolute_error: 0.0956\n",
            "Epoch 5/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0054 - mean_squared_error: 0.0054 - mean_absolute_error: 0.0580 - val_loss: 0.0087 - val_mean_squared_error: 0.0087 - val_mean_absolute_error: 0.0739\n",
            "Epoch 6/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0453 - val_loss: 0.0072 - val_mean_squared_error: 0.0072 - val_mean_absolute_error: 0.0680\n",
            "Epoch 7/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0039 - mean_squared_error: 0.0039 - mean_absolute_error: 0.0493 - val_loss: 0.0167 - val_mean_squared_error: 0.0167 - val_mean_absolute_error: 0.1083\n",
            "Epoch 8/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0074 - mean_squared_error: 0.0074 - mean_absolute_error: 0.0717 - val_loss: 0.0062 - val_mean_squared_error: 0.0062 - val_mean_absolute_error: 0.0624\n",
            "Epoch 9/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0033 - mean_squared_error: 0.0033 - mean_absolute_error: 0.0452 - val_loss: 0.0060 - val_mean_squared_error: 0.0060 - val_mean_absolute_error: 0.0611\n",
            "Epoch 10/100\n",
            "16/16 [==============================] - 0s 11ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0443 - val_loss: 0.0058 - val_mean_squared_error: 0.0058 - val_mean_absolute_error: 0.0600\n",
            "Epoch 11/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0472 - val_loss: 0.0172 - val_mean_squared_error: 0.0172 - val_mean_absolute_error: 0.1120\n",
            "Epoch 12/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0101 - mean_squared_error: 0.0101 - mean_absolute_error: 0.0828 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0579\n",
            "Epoch 13/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0441 - val_loss: 0.0053 - val_mean_squared_error: 0.0053 - val_mean_absolute_error: 0.0569\n",
            "Epoch 14/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - mean_absolute_error: 0.0428 - val_loss: 0.0060 - val_mean_squared_error: 0.0060 - val_mean_absolute_error: 0.0607\n",
            "Epoch 15/100\n",
            "16/16 [==============================] - 0s 11ms/step - loss: 0.0028 - mean_squared_error: 0.0028 - mean_absolute_error: 0.0425 - val_loss: 0.0100 - val_mean_squared_error: 0.0100 - val_mean_absolute_error: 0.0812\n",
            "Epoch 16/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0055 - mean_squared_error: 0.0055 - mean_absolute_error: 0.0615 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0661\n",
            "Epoch 17/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0029 - mean_squared_error: 0.0029 - mean_absolute_error: 0.0421 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0544\n",
            "Epoch 18/100\n",
            "16/16 [==============================] - 0s 11ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0394 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0537\n",
            "Epoch 19/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0036 - mean_squared_error: 0.0036 - mean_absolute_error: 0.0456 - val_loss: 0.0122 - val_mean_squared_error: 0.0122 - val_mean_absolute_error: 0.0916\n",
            "Epoch 20/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0035 - mean_squared_error: 0.0035 - mean_absolute_error: 0.0462 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0664\n",
            "Epoch 21/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0031 - mean_squared_error: 0.0031 - mean_absolute_error: 0.0439 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0536\n",
            "Epoch 22/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0380 - val_loss: 0.0046 - val_mean_squared_error: 0.0046 - val_mean_absolute_error: 0.0534\n",
            "Epoch 23/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0025 - mean_squared_error: 0.0025 - mean_absolute_error: 0.0398 - val_loss: 0.0047 - val_mean_squared_error: 0.0047 - val_mean_absolute_error: 0.0541\n",
            "Epoch 24/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0041 - mean_squared_error: 0.0041 - mean_absolute_error: 0.0514 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0524\n",
            "Epoch 25/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0379 - val_loss: 0.0052 - val_mean_squared_error: 0.0052 - val_mean_absolute_error: 0.0562\n",
            "Epoch 26/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0376 - val_loss: 0.0115 - val_mean_squared_error: 0.0115 - val_mean_absolute_error: 0.0895\n",
            "Epoch 27/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0043 - mean_squared_error: 0.0043 - mean_absolute_error: 0.0531 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0579\n",
            "Epoch 28/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0381 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0597\n",
            "Epoch 29/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0034 - mean_squared_error: 0.0034 - mean_absolute_error: 0.0461 - val_loss: 0.0049 - val_mean_squared_error: 0.0049 - val_mean_absolute_error: 0.0547\n",
            "Epoch 30/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0357 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0534\n",
            "Epoch 31/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0393 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0510\n",
            "Epoch 32/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0028 - mean_squared_error: 0.0028 - mean_absolute_error: 0.0421 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0510\n",
            "Epoch 33/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0339 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0503\n",
            "Epoch 34/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0378 - val_loss: 0.0071 - val_mean_squared_error: 0.0071 - val_mean_absolute_error: 0.0677\n",
            "Epoch 35/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0370 - val_loss: 0.0058 - val_mean_squared_error: 0.0058 - val_mean_absolute_error: 0.0612\n",
            "Epoch 36/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0027 - mean_squared_error: 0.0027 - mean_absolute_error: 0.0408 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0503\n",
            "Epoch 37/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0339 - val_loss: 0.0055 - val_mean_squared_error: 0.0055 - val_mean_absolute_error: 0.0596\n",
            "Epoch 38/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0388 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0494\n",
            "Epoch 39/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0366 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0510\n",
            "Epoch 40/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0382 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0508\n",
            "Epoch 41/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0383 - val_loss: 0.0043 - val_mean_squared_error: 0.0043 - val_mean_absolute_error: 0.0525\n",
            "Epoch 42/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0382 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0507\n",
            "Epoch 43/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0384 - val_loss: 0.0050 - val_mean_squared_error: 0.0050 - val_mean_absolute_error: 0.0555\n",
            "Epoch 44/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0384 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0491\n",
            "Epoch 45/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0339 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0517\n",
            "Epoch 46/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0344 - val_loss: 0.0043 - val_mean_squared_error: 0.0043 - val_mean_absolute_error: 0.0512\n",
            "Epoch 47/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0336 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0493\n",
            "Epoch 48/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0378 - val_loss: 0.0056 - val_mean_squared_error: 0.0056 - val_mean_absolute_error: 0.0594\n",
            "Epoch 49/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0345 - val_loss: 0.0045 - val_mean_squared_error: 0.0045 - val_mean_absolute_error: 0.0540\n",
            "Epoch 50/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0024 - mean_squared_error: 0.0024 - mean_absolute_error: 0.0387 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0494\n",
            "Epoch 51/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0019 - mean_squared_error: 0.0019 - mean_absolute_error: 0.0344 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0512\n",
            "Epoch 52/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0326 - val_loss: 0.0051 - val_mean_squared_error: 0.0051 - val_mean_absolute_error: 0.0572\n",
            "Epoch 53/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0023 - mean_squared_error: 0.0023 - mean_absolute_error: 0.0384 - val_loss: 0.0043 - val_mean_squared_error: 0.0043 - val_mean_absolute_error: 0.0510\n",
            "Epoch 54/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0326 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0486\n",
            "Epoch 55/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0367 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0479\n",
            "Epoch 56/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0316 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0480\n",
            "Epoch 57/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0021 - mean_squared_error: 0.0021 - mean_absolute_error: 0.0360 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0478\n",
            "Epoch 58/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0355 - val_loss: 0.0043 - val_mean_squared_error: 0.0043 - val_mean_absolute_error: 0.0523\n",
            "Epoch 59/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0371 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0484\n",
            "Epoch 60/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0367 - val_loss: 0.0039 - val_mean_squared_error: 0.0039 - val_mean_absolute_error: 0.0486\n",
            "Epoch 61/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0323 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0475\n",
            "Epoch 62/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0311 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0477\n",
            "Epoch 63/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0329 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0498\n",
            "Epoch 64/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0022 - mean_squared_error: 0.0022 - mean_absolute_error: 0.0358 - val_loss: 0.0067 - val_mean_squared_error: 0.0067 - val_mean_absolute_error: 0.0668\n",
            "Epoch 65/100\n",
            "16/16 [==============================] - 0s 10ms/step - loss: 0.0020 - mean_squared_error: 0.0020 - mean_absolute_error: 0.0357 - val_loss: 0.0038 - val_mean_squared_error: 0.0038 - val_mean_absolute_error: 0.0484\n",
            "Epoch 66/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0328 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0500\n",
            "Epoch 67/100\n",
            "16/16 [==============================] - 0s 7ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0328 - val_loss: 0.0042 - val_mean_squared_error: 0.0042 - val_mean_absolute_error: 0.0516\n",
            "Epoch 68/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0314 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0485\n",
            "Epoch 69/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0015 - mean_squared_error: 0.0015 - mean_absolute_error: 0.0309 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0499\n",
            "Epoch 70/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0316 - val_loss: 0.0037 - val_mean_squared_error: 0.0037 - val_mean_absolute_error: 0.0478\n",
            "Epoch 71/100\n",
            "16/16 [==============================] - 0s 8ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0332 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0475\n",
            "Epoch 72/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0312 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0472\n",
            "Epoch 73/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0018 - mean_squared_error: 0.0018 - mean_absolute_error: 0.0328 - val_loss: 0.0036 - val_mean_squared_error: 0.0036 - val_mean_absolute_error: 0.0476\n",
            "Epoch 74/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0017 - mean_squared_error: 0.0017 - mean_absolute_error: 0.0320 - val_loss: 0.0041 - val_mean_squared_error: 0.0041 - val_mean_absolute_error: 0.0503\n",
            "Epoch 75/100\n",
            "16/16 [==============================] - 0s 9ms/step - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0312 - val_loss: 0.0040 - val_mean_squared_error: 0.0040 - val_mean_absolute_error: 0.0506\n",
            "Epoch 76/100\n",
            "10/16 [=================>............] - ETA: 0s - loss: 0.0016 - mean_squared_error: 0.0016 - mean_absolute_error: 0.0315"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Ctrl + C detected. Stopping sweep.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gFTu29dbi18i"
      },
      "source": [
        "# Setting up the best model\n",
        "Using the best values from the hyperparamter search with wandb, the most optimal model configuration is used."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NwsO8cDJPMdj"
      },
      "source": [
        "# picking the best values\n",
        "best_config = {\n",
        "    'epochs': 50,\n",
        "    'batch_size': 32,\n",
        "    'learning_rate': 0.001,\n",
        "    'optimizer': 'adam',\n",
        "    'activation': 'selu'\n",
        "}"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4FChEjDTvFgN",
        "outputId": "8f6969f1-6c77-4803-bc84-10644a679947"
      },
      "source": [
        "# clearing the settings on the keras backend\n",
        "keras.backend.clear_session()\n",
        "\n",
        "# setting keras model to sequential mode\n",
        "model = Sequential()\n",
        "\n",
        "# layer 1\n",
        "model.add(TimeDistributed(Conv1D(filters=128, kernel_size=2, activation=best_config['activation']), input_shape=(None, window_len, 1)))\n",
        "# layer 2\n",
        "model.add(TimeDistributed(MaxPooling1D(pool_size=2)))\n",
        "# layer 3\n",
        "model.add(TimeDistributed(Flatten()))\n",
        "# layer 4\n",
        "model.add(LSTM(units=128, activation='tanh', return_sequences=False))\n",
        "# layer 5\n",
        "model.add(Dropout(0.1))\n",
        "# layer 6\n",
        "model.add(Dense(1))\n",
        "\n",
        "# defining the optimiser\n",
        "if best_config['optimizer'] == 'sgd':\n",
        "  optimizer = SGD(learning_rate=best_config['learning_rate'], decay=1e-5, momentum=0.9, nesterov=True)\n",
        "elif best_config['optimizer'] == 'rmsprop':\n",
        "  optimizer = RMSprop(learning_rate=best_config['learning_rate'], decay=1e-5)\n",
        "elif best_config['optimizer'] == 'adam':\n",
        "  optimizer = Adam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "elif best_config['optimizer'] == 'nadam':\n",
        "  optimizer = Nadam(learning_rate=best_config['learning_rate'], beta_1=0.9, beta_2=0.999, clipnorm=1.0)\n",
        "\n",
        "# compile the model\n",
        "model.compile(optimizer, loss='mean_squared_error')\n",
        "\n",
        "# counting the number of trainable parameters\n",
        "trainable_count = count_params(model.trainable_weights)\n",
        "print('Total number of trainable parameters: ', trainable_count)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Total number of trainable parameters:  984065\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5UG8j_4r7kSu",
        "outputId": "80f898c4-15f8-4439-e638-342180335e03"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "time_distributed (TimeDistri (None, None, 29, 128)     384       \n",
            "_________________________________________________________________\n",
            "time_distributed_1 (TimeDist (None, None, 14, 128)     0         \n",
            "_________________________________________________________________\n",
            "time_distributed_2 (TimeDist (None, None, 1792)        0         \n",
            "_________________________________________________________________\n",
            "lstm (LSTM)                  (None, 128)               983552    \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 1)                 129       \n",
            "=================================================================\n",
            "Total params: 984,065\n",
            "Trainable params: 984,065\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3v718GcE39o",
        "outputId": "e12d89f6-eaee-42a8-eeb3-47752c5a20e0"
      },
      "source": [
        "# fitting the model to the training dataset\n",
        "model.fit(X_train, y_train, epochs=best_config['epochs'], batch_size=best_config['batch_size'])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/50\n",
            "40/40 [==============================] - 2s 4ms/step - loss: 0.0493\n",
            "Epoch 2/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0051\n",
            "Epoch 3/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0034\n",
            "Epoch 4/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0025\n",
            "Epoch 5/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0034\n",
            "Epoch 6/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0026\n",
            "Epoch 7/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0021\n",
            "Epoch 8/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0021\n",
            "Epoch 9/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0019\n",
            "Epoch 10/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0017\n",
            "Epoch 11/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0027\n",
            "Epoch 12/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0017\n",
            "Epoch 13/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0016\n",
            "Epoch 14/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0016\n",
            "Epoch 15/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0020\n",
            "Epoch 16/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0016\n",
            "Epoch 17/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0018\n",
            "Epoch 18/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0021\n",
            "Epoch 19/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0021\n",
            "Epoch 20/50\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0019\n",
            "Epoch 21/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n",
            "Epoch 22/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 23/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0018\n",
            "Epoch 24/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 25/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n",
            "Epoch 26/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0021\n",
            "Epoch 27/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0016\n",
            "Epoch 28/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 29/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0016\n",
            "Epoch 30/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 31/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 32/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 33/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0017\n",
            "Epoch 34/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0011\n",
            "Epoch 35/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 36/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 37/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 38/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 39/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 40/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 41/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 42/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n",
            "Epoch 43/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 44/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0014\n",
            "Epoch 45/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n",
            "Epoch 46/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 47/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n",
            "Epoch 48/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 49/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0013\n",
            "Epoch 50/50\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0015\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fb9365a2050>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rTXJN51l9Y-F"
      },
      "source": [
        "# creating an instance of Baseline_Model class using X_test\n",
        "base_model = Base_Model(X_test, window_len)\n",
        "# calling predict_y method\n",
        "base_model.predict_y(in_data.test_len - window_len)\n",
        "\n",
        "# using the model to predict y from X_test\n",
        "y_pred = model.predict(X_test)\n",
        "# assigning y_dummy variable to .y_pred class attribute\n",
        "y_dummy = base_model.y_pred\n",
        "\n",
        "# calling class method extract_real_price to generate unnormalised prices\n",
        "in_data.extract_real_prices(y_pred, y_dummy)\n",
        "\n",
        "# assinging y_true variable\n",
        "y_true = in_data.y_true\n",
        "\n",
        "# assigning actual_price, predicted_price and dummy_price\n",
        "actual_price = in_data.actual_price\n",
        "predicted_price = in_data.predicted_price\n",
        "dummy_price = in_data.dummy_price"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H-D-XHyRjFMp"
      },
      "source": [
        "# Plotting the prediction results and getting errors\n",
        "The cells below plot the actual, predicted and dummy prices using the Security_Plotter class before finally saving the model and plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 395
        },
        "id": "PgjvooOD3jq3",
        "outputId": "b4a68fb0-b9c7-4fed-d6d3-b808e9efcaba"
      },
      "source": [
        "plotter = Security_Plotter(in_data, actual_price, predicted_price,\n",
        "                            dummy_price, in_data.train_len, window_len, in_str, model_str)\n",
        "\n",
        "plotter.single_plot()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 864x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AxaH7IUCxSXw",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 748
        },
        "outputId": "9048d83f-bd67-4e03-c662-9bafe1e11a52"
      },
      "source": [
        "plot_model(model, show_shapes=True, expand_nested=True)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bFfQGfb79SJS",
        "outputId": "9086d390-52c5-4999-ead1-3453122bd4ca"
      },
      "source": [
        "# calculating mean squared error\n",
        "mse = mean_squared_error(y_true, y_pred)\n",
        "d_mse = mean_squared_error(y_true, y_dummy)\n",
        "\n",
        "# calculating root mean squared error\n",
        "rmse = mean_squared_error(y_true, y_pred, squared=False)\n",
        "d_rmse = mean_squared_error(y_true, y_dummy, squared=False)\n",
        "\n",
        "# calculating mean absolute error\n",
        "mae = mean_absolute_error(y_true, y_pred)\n",
        "d_mae = mean_absolute_error(y_true, y_dummy)\n",
        "\n",
        "print('MSE: ', mse)\n",
        "print('RMSE: ', rmse)\n",
        "print('MAE: ', mae)\n",
        "print('Dummy MSE: ', d_mse)\n",
        "print('Dummy RMSE: ', d_rmse)\n",
        "print('Dummy MAE: ', d_mae)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "MSE:  0.0024384521264538355\n",
            "RMSE:  0.04938068576330057\n",
            "MAE:  0.03708052400997367\n",
            "Dummy MSE:  0.011907945328582062\n",
            "Dummy RMSE:  0.10912353242349727\n",
            "Dummy MAE:  0.08287353397503001\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4YttzJHHU4-s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d79cc8d-2fc4-4dd4-f7e8-1b8bdf87910f"
      },
      "source": [
        "# creating a string to save the model based on model name\n",
        "save_path = '/content/gdrive/My Drive/models/'+model_str+'_'+in_str+'/'\n",
        "# mounting google drive for easy storage of model\n",
        "from google.colab import drive\n",
        "# mounting the drive\n",
        "drive.mount('/content/gdrive/')\n",
        "# making the relevant directory to store the model\n",
        "os.mkdir(save_path)\n",
        "# saving the model\n",
        "keras.models.save_model(model, save_path)\n",
        "# saving the model graph\n",
        "model_graph = plot_model(model, to_file=save_path+model_str+'_'+in_str+'_graph_.png', show_shapes=True, expand_nested=True)\n",
        "# saving the matplotlib plot\n",
        "plotter.fig.savefig(save_path+model_str+'_'+in_str+'_plot.png', bbox_inches='tight')\n",
        "# saving the error metrics as a text file\n",
        "error_file = open(save_path+model_str+'_'+in_str+'_metrics.txt', 'w+')\n",
        "error_file.write('MSE: '+str(mse)+'\\n'+'RMSE: '+str(rmse)+'\\n'+'MAE: '+str(mae)+'\\n'+\n",
        "                 'Dummy MSE: '+str(d_mse)+'\\n'+'Dummy RMSE: '+str(d_rmse)+'\\n'+'Dummy MAE: '+str(d_mae))\n",
        "error_file.close()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/gdrive/\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "WARNING:absl:Found untraced functions such as lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_fn, lstm_cell_layer_call_fn, lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_and_return_conditional_losses while saving (showing 5 of 5). These functions will not be directly callable after loading.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /content/gdrive/My Drive/models/CNN_LSTM_Treasury10y/assets\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "INFO:tensorflow:Assets written to: /content/gdrive/My Drive/models/CNN_LSTM_Treasury10y/assets\n"
          ],
          "name": "stderr"
        }
      ]
    }
  ]
}